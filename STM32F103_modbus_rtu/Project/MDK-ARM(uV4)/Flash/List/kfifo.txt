; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\kfifo.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\kfifo.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I..\..\User\FreeRTOS\Source\include -I..\..\User\FreeRTOS\Source\portable\MemMang -I..\..\User\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\..\User\FreeModbus-V1.5\include -I..\..\User\FreeModbus-V1.5\STM32F103-PORT -I..\..\User\FreeModbus-V1.5\BARE\port -I..\..\User\FreeModbus-V1.5\rtu -I"E:\woosiyuan\smarthome\stm32f10x\STM32F103ZET6+FreeRTOS V8.2.3+kfifoё╗ги╤АлЛ╧╓ё╘+FreeModbus-V1.5.0-╢с╩З\Project\MDK-ARM(uV4)\RTE" -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\kfifo.crf ..\..\User\bsp\kfifo.c]
                          THUMB

                          AREA ||i.__kfifo_get||, CODE, READONLY, ALIGN=1

                  __kfifo_get PROC
;;;148      
;;;149    unsigned int __kfifo_get(struct KFIFO *fifo, unsigned char *buffer, unsigned int len)   
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;150    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4615              MOV      r5,r2
;;;151        unsigned int L;   
;;;152      
;;;153        len = min(len, fifo->in - fifo->out);   
00000a  e9d40102          LDRD     r0,r1,[r4,#8]
00000e  1a40              SUBS     r0,r0,r1
000010  42a8              CMP      r0,r5
000012  d901              BLS      |L1.24|
000014  4628              MOV      r0,r5
000016  e002              B        |L1.30|
                  |L1.24|
000018  e9d40102          LDRD     r0,r1,[r4,#8]
00001c  1a40              SUBS     r0,r0,r1
                  |L1.30|
00001e  4605              MOV      r5,r0
;;;154      
;;;155        /*  
;;;156         * Ensure that we sample the fifo->in index -before- we  
;;;157         * start removing bytes from the kfifo.  
;;;158         */   
;;;159      
;;;160        //smp_rmb();    //Е╓ Е╓└Г░├Е≥╗ Е╓└Г░├Е├┘Е╜≤ Г └ Е╠▐И °О╪▄STM32Д╦█И°─Х╕│Х©≥Д╦╙
;;;161      
;;;162        /* first get the data from fifo->out until the end of the buffer */   
;;;163        L = min(len, fifo->size - (fifo->out & (fifo->size - 1)));   
000020  6861              LDR      r1,[r4,#4]
000022  1e49              SUBS     r1,r1,#1
000024  68e0              LDR      r0,[r4,#0xc]
000026  4008              ANDS     r0,r0,r1
000028  6861              LDR      r1,[r4,#4]
00002a  1a08              SUBS     r0,r1,r0
00002c  42a8              CMP      r0,r5
00002e  d901              BLS      |L1.52|
000030  4628              MOV      r0,r5
000032  e005              B        |L1.64|
                  |L1.52|
000034  6861              LDR      r1,[r4,#4]
000036  1e49              SUBS     r1,r1,#1
000038  68e0              LDR      r0,[r4,#0xc]
00003a  4008              ANDS     r0,r0,r1
00003c  6861              LDR      r1,[r4,#4]
00003e  1a08              SUBS     r0,r1,r0
                  |L1.64|
000040  4607              MOV      r7,r0
;;;164        memcpy(buffer, fifo->buffer + (fifo->out & (fifo->size - 1)), L);   
000042  6862              LDR      r2,[r4,#4]
000044  1e52              SUBS     r2,r2,#1
000046  68e0              LDR      r0,[r4,#0xc]
000048  4010              ANDS     r0,r0,r2
00004a  6822              LDR      r2,[r4,#0]
00004c  1881              ADDS     r1,r0,r2
00004e  463a              MOV      r2,r7
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       __aeabi_memcpy
;;;165      
;;;166        /* then get the rest (if any) from the beginning of the buffer */   
;;;167        memcpy(buffer + L, fifo->buffer, len - L);   
000056  1bea              SUBS     r2,r5,r7
000058  19f0              ADDS     r0,r6,r7
00005a  6821              LDR      r1,[r4,#0]
00005c  f7fffffe          BL       __aeabi_memcpy
;;;168      
;;;169        /*  
;;;170         * Ensure that we remove the bytes from the kfifo -before-  
;;;171         * we update the fifo->out index.  
;;;172         */   
;;;173      
;;;174        //smp_mb();   //Е╓ Е╓└Г░├Е≥╗ Е╓└Г░├Е├┘Е╜≤ Г └ Е╠▐И °О╪▄STM32Д╦█И°─Х╕│Х©≥Д╦╙
;;;175    			
;;;176    			/*
;;;177    		   * ФЁ╗Ф└▐Х©≥И┤▄ Е▐╙Ф≤╞Г■╗Д╨├ fifo->out +=  len Д╧÷Ф°╙Е▐√Ф╗║Х©░Г╝≈О╪▄
;;;178    			 * Е░▄Ф═╥unsigned intГ └Ф╨╒Е┤╨Ф─╖Х╢╗О╪▄Е╫⌠out Ф▄│Г╩╜Е╒·Е┼═Е┬╟Ф╨╒Е┤╨Ф≈╤Е▐┬Д╪ Х╒╚Г╫╝Д╦╨0О╪▄
;;;179    			 * Е╕┌Ф·°inЕ┘┬Ф╨╒Е┤╨О╪▄Е┤╨Г▌╟ in  < out Г └Ф┐┘Е├╣О╪▄И┌ёД╧┬ in Б─⌠ out Д╦╨Х╢÷Ф∙╟О╪┬Е▐┬Е╟├Ф╨╒Е┤╨О╪┴О╪▄
;;;180    			 * in Б─⌠ out Г └Е─╪Х©≤Ф≤╞Д╦╨bufferД╦╜Ф∙╟Ф█╝Г └И∙©Е╨╕Ц─┌
;;;181    			 */
;;;182    
;;;183        fifo->out += len;
000060  68e0              LDR      r0,[r4,#0xc]
000062  4428              ADD      r0,r0,r5
000064  60e0              STR      r0,[r4,#0xc]
;;;184      
;;;185        return len;  
000066  4628              MOV      r0,r5
;;;186    }
000068  e8bd81f0          POP      {r4-r8,pc}
;;;187    
                          ENDP


                          AREA ||i.__kfifo_put||, CODE, READONLY, ALIGN=1

                  __kfifo_put PROC
;;;96     
;;;97     unsigned int __kfifo_put(struct KFIFO *fifo, unsigned char *buffer, unsigned int len)   
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;98     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4615              MOV      r5,r2
;;;99         unsigned int L;
;;;100    	
;;;101    		//Г▌╞Е╫╒Г╪⌠Е├╡Е▄╨Г └Е┴╘Д╫≥Е╝╧И┤▐Д╦╨fifo->size - fifo->in + fifo->outО╪▄Х╝╘Е├≥Е┘╔Г └И∙©Е╨╕Е▐√lenЕ▓▄Е┴╘Д╫≥Е╝╧И┤▐Д╦╜Х╬┐Е╟▐Г └О╪▄И│©Е┘█Е├≥Х╤┼Г∙▄О╪⌡
;;;102        len = min( len , fifo->size - fifo->in + fifo->out );
00000a  e9d40101          LDRD     r0,r1,[r4,#4]
00000e  1a40              SUBS     r0,r0,r1
000010  68e1              LDR      r1,[r4,#0xc]
000012  4408              ADD      r0,r0,r1
000014  42a8              CMP      r0,r5
000016  d901              BLS      |L2.28|
000018  4628              MOV      r0,r5
00001a  e004              B        |L2.38|
                  |L2.28|
00001c  e9d40101          LDRD     r0,r1,[r4,#4]
000020  1a40              SUBS     r0,r0,r1
000022  68e1              LDR      r1,[r4,#0xc]
000024  4408              ADD      r0,r0,r1
                  |L2.38|
000026  4605              MOV      r5,r0
;;;103      
;;;104        /*  
;;;105         * Ensure that we sample the fifo->out index -before- we  
;;;106         * start putting bytes into the kfifo.  
;;;107         */   
;;;108    				//Е╓ Е╓└Г░├Е≥╗ Е╓└Г░├Е├┘Е╜≤ Г └ Е╠▐И °О╪▄STM32Д╦█И°─Х╕│Х©≥Д╦╙
;;;109    				//    smp_mb(); 
;;;110      
;;;111        /* first put the data starting from fifo->in to buffer end */
;;;112    				/* И╕√Е┘┬Е╟├Ф∙╟Ф█╝Д╩▌fifo.in Ф┴─Е°╗Г └Д╫█Г╫╝Е╪─Е╖▀Е├≥О╪▄Е├≥Д╧▀Е┴█О╪▄И╕√Е┘┬Х╕│Г°▀Д╦─Д╦▀fifo->inЕ┬╟ buffer Ф°╚Е╟╬Г └Е╓╖Е╟▐ Ф≤╞Д╦█Ф≤╞ Ф╞■ len Е╓╖*/
;;;113    	
;;;114    				/*
;;;115    				 * Е┴█И²╒Х╝╡Е┬╟fifo->sizeЕ╥╡Г╩▐2Г └Ф╛║Е╧┌Е°├Ф∙╢О╪▄Д╦╩Х╕│Ф≤╞Ф√╧Д╬©Х©≥И┤▄Х╝║Г╝≈О╪▄Ф▐░Е█┤Ф∙┬Г▌┤
;;;116    		     * Е°╗Е╞╧10Х©⌡Х║▄Ф╠┌Д╫≥Г └Ф≈╤Е─≥О╪▄Ф┬▒Д╩╛Е▐▒Г▌╟О╪▄Д╫≥Ф∙╟Ф─╩Ф≤╞Ф∙╢Ф∙╟Д╦╜Г └Д╦╙Д╫█Д╦┼Г └Ф∙╟Е╜≈О╪▄Х─▄Д╦█Г■╗Г╝║Е┘╤Д╩√Д╫█Ф≤╞Д╩─Д╧┬О╪⌡
;;;117    				 * Ф┴─Д╩╔,kfifo->in % kfifo->size Е▐╞Д╩╔Х╫╛Е▄√Д╦╨ kfifo->in & (kfifo->size Б─⌠ 1)О╪▄Ф∙┬Г▌┤Д╪ Ф▐░Е█┤
;;;118    				 * Ф┴─Д╩╔fifo->size - (fifo->in & (fifo->size - L)) Е█ЁД╫█ fifo->in Е┬╟ bufferФ°╚Е╟╬Ф┴─Е┴╘Д╫≥Г └И∙©Е╨╕О╪▄
;;;119    				 * LЕ▐√lenЕ▓▄Е┴╘Д╫≥И∙©Е╨╕Г └Ф°─Е╟▐Е─╪О╪▄Е█ЁД╦╨И°─Х╕│Ф▀╥Х╢²L Е╜≈Х┼┌Е┬╟fifo->buffer + fifo->inГ └Д╫█Г╫╝Д╦┼Ц─┌
;;;120    				 */ 
;;;121        L = min(len, fifo->size - (fifo->in & (fifo->size - 1)));
000028  e9d41001          LDRD     r1,r0,[r4,#4]
00002c  1e49              SUBS     r1,r1,#1
00002e  4008              ANDS     r0,r0,r1
000030  6861              LDR      r1,[r4,#4]
000032  1a08              SUBS     r0,r1,r0
000034  42a8              CMP      r0,r5
000036  d901              BLS      |L2.60|
000038  4628              MOV      r0,r5
00003a  e005              B        |L2.72|
                  |L2.60|
00003c  e9d41001          LDRD     r1,r0,[r4,#4]
000040  1e49              SUBS     r1,r1,#1
000042  4008              ANDS     r0,r0,r1
000044  6861              LDR      r1,[r4,#4]
000046  1a08              SUBS     r0,r1,r0
                  |L2.72|
000048  4606              MOV      r6,r0
;;;122    	
;;;123        memcpy(fifo->buffer + (fifo->in & (fifo->size - 1)), buffer, L);
00004a  e9d42101          LDRD     r2,r1,[r4,#4]
00004e  1e52              SUBS     r2,r2,#1
000050  4011              ANDS     r1,r1,r2
000052  6822              LDR      r2,[r4,#0]
000054  1888              ADDS     r0,r1,r2
000056  4632              MOV      r2,r6
000058  4639              MOV      r1,r7
00005a  f7fffffe          BL       __aeabi_memcpy
;;;124      
;;;125        /* then put the rest (if any) at the beginning of the buffer */ 
;;;126    
;;;127        memcpy(fifo->buffer, buffer + L, len - L);
00005e  1baa              SUBS     r2,r5,r6
000060  19b9              ADDS     r1,r7,r6
000062  6820              LDR      r0,[r4,#0]
000064  f7fffffe          BL       __aeabi_memcpy
;;;128      
;;;129        /*  
;;;130         * Ensure that we add the bytes to the kfifo -before-  
;;;131         * we update the fifo->in index.  
;;;132         */   
;;;133      
;;;134          // smp_wmb();   //Е╓ Е╓└Г░├Е≥╗ Е╓└Г░├Е├┘Е╜≤ Г └ Е╠▐И °О╪▄STM32Д╦█И°─Х╕│Х©≥Д╦╙	
;;;135    
;;;136    			/* 
;;;137    			 * ФЁ╗Ф└▐Х©≥И┤▄ Е▐╙Ф≤╞Г■╗Д╨├ fifo->in +=  lenХ─▄Ф°╙Е▐√Ф╗║О╪▄
;;;138    			 * Х©≥Е╟╠Ф≤╞kfifoГ └Х╝╬Х╝║Г╡╬Е╕≥Д╧▀Е╓└О╪▄Х©≥И┤▄Г■╗Е┬╟Д╨├unsigned intГ └Ф╨╒Е┤╨Ф─╖Х╢╗О╪▄
;;;139    			 * Е╫⌠in Ф▄│Г╩╜Е╒·Е┼═Е┬╟Ф╨╒Е┤╨Ф≈╤Е▐┬Д╪ Х╒╚Г╫╝Д╦╨0О╪▄Х©≥Ф═╥Е╟╠Х┼┌Г°│Д╨├Ф╞▐Ф╛║inЕ░▒Е┴█Е╒·Е┼═И┐╫Х╕│Е▐√Ф╗║Г └Ф─╖Х┐╫О╪▄
;;;140    			 * И■╠И⌠╒Е©┘Х╬┐О╪▄Г╡╬Г⌡┼Ф╠┌Г╡╬О╪▄Х╝╘Д╨╨Д╦█Е╬≈Д╦█Д╫╘Ф°█Ц─┌
;;;141    			 */
;;;142      
;;;143        fifo->in += len; 
000068  68a0              LDR      r0,[r4,#8]
00006a  4428              ADD      r0,r0,r5
00006c  60a0              STR      r0,[r4,#8]
;;;144    		
;;;145      	/*Х©■Е⌡·Е─╪ Д╩ёХ║╗  Е├≥Е┘╔Ф∙╟Ф█╝Г └Д╦╙Ф∙╟ О╪▄Х©≥Ф═╥ Е╟╠Е▐╞Д╩╔Ф═╧Ф█╝Х©■Е⌡·Е─╪ Е┬╓Ф√╜Г╪⌠Е├╡Е▄╨Ф≤╞Е░╕Е├≥Ф╩║*/
;;;146        return len;
00006e  4628              MOV      r0,r5
;;;147    }  
000070  e8bd81f0          POP      {r4-r8,pc}
;;;148      
                          ENDP


                          AREA ||i.kfifo_alloc||, CODE, READONLY, ALIGN=1

                  kfifo_alloc PROC
;;;53     
;;;54     struct KFIFO *kfifo_alloc(unsigned int size) 
000000  b570              PUSH     {r4-r6,lr}
;;;55     {   
000002  4605              MOV      r5,r0
;;;56         unsigned char *buffer;
;;;57     	
;;;58         struct KFIFO *ret;
;;;59     	
;;;60     		ret=(struct KFIFO *) pvPortMalloc(sizeof (struct KFIFO));
000004  2010              MOVS     r0,#0x10
000006  f7fffffe          BL       pvPortMalloc
00000a  4604              MOV      r4,r0
;;;61     
;;;62         /*  
;;;63          * round up to the next power of 2, since our 'let the indices  
;;;64          * wrap' tachnique works only in this case.  
;;;65     		 * Е╕┌Ф·°size Ф≤╞2Г └ Ф╛║Е╧┌Е°├Ф∙╢О╪▄Е┬≥ size & (size - 1)  =0
;;;66          */
;;;67       
;;;68         if (size & (size - 1)) 
00000c  1e68              SUBS     r0,r5,#1
00000e  4028              ANDS     r0,r0,r5
000010  b118              CBZ      r0,|L3.26|
;;;69     		{   
;;;70     			//        BUG_ON(size > 0x80000000);  
;;;71     			
;;;72     			//Е╕┌Ф·°Д╫═Х╕│Г■ЁХ╞╥Г └buffer Д╦█Ф≤╞ 2Г └ Ф╛║Е╧┌Е°├Ф∙╢О╪▄Е╟╠Х╕│Ф┼┼ size Е▐≤Ф┬░ 2Г └Ф╛║Е╧┌Е°├Ф∙╢ О╪▄Ф√╧Д╬©Д╦▀И²╒Х╝║Г╝≈
;;;73             size = roundup_pow_of_two(size);
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       roundup_pow_of_two
000018  4605              MOV      r5,r0
                  |L3.26|
;;;74         }
;;;75     		
;;;76     		//Х©≥И┤▄Д╫©Г■╗ FreeRTOSГ └ Е┬├И┘█Е├┘Е╜≤Г └ API
;;;77         buffer = (unsigned char*) pvPortMalloc(size);
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       pvPortMalloc
000020  4606              MOV      r6,r0
;;;78     		
;;;79         if (!buffer)   //Е╕┌Ф·°Х©■Е⌡·Г └Е─╪Д╦╨NULLО╪▄Х©≥Х╞╢Ф≤▌Е┬├И┘█Е├┘Е╜≤Е╓╠Х╢╔
000022  b90e              CBNZ     r6,|L3.40|
;;;80             return 0UL;
000024  2000              MOVS     r0,#0
                  |L3.38|
;;;81       
;;;82     		//    ret = kfifo_init(buffer, size, lock);   
;;;83     		
;;;84     		ret->buffer=buffer;
;;;85     		ret->size  =size;
;;;86     		ret->in  = 0;
;;;87     		ret->out = 0;
;;;88     		
;;;89         if (!ret) //Е╕┌Ф·°retГ └Е─╪Д╦╨NULLО╪▄Х©≥Х╞╢Ф≤▌Е┬├И┘█Е├┘Е╜≤Е╓╠Х╢╔
;;;90             vPortFree(buffer); //И┤┼Ф■╬Д╧▀Е┴█Е┬├И┘█Г └ Е├┘Е╜≤Г╘╨И≈╢
;;;91       
;;;92         return ret;
;;;93     		
;;;94     }
000026  bd70              POP      {r4-r6,pc}
                  |L3.40|
000028  6026              STR      r6,[r4,#0]            ;84
00002a  6065              STR      r5,[r4,#4]            ;85
00002c  2000              MOVS     r0,#0                 ;86
00002e  60a0              STR      r0,[r4,#8]            ;86
000030  60e0              STR      r0,[r4,#0xc]          ;87
000032  b914              CBNZ     r4,|L3.58|
000034  4630              MOV      r0,r6                 ;90
000036  f7fffffe          BL       vPortFree
                  |L3.58|
00003a  4620              MOV      r0,r4                 ;92
00003c  e7f3              B        |L3.38|
;;;95     
                          ENDP


                          AREA ||i.roundup_pow_of_two||, CODE, READONLY, ALIGN=1

                  roundup_pow_of_two PROC
;;;32     //Ф┴╬Е┤╨Ф°─Ф▌╔Х©▒ Ф°─Е╓╖2Г └Ф▄┤Ф∙╟Ф╛║Е╧┌
;;;33     unsigned int roundup_pow_of_two(unsigned int date_roundup_pow_of_two )
000000  4601              MOV      r1,r0
;;;34     {			
;;;35     	/* Х©≥И┤▄И┤┤Г■╗ STM32 Г║╛Д╩╤Ф▐░Д╬⌡Г └Х╝║Г╝≈Е┴█Е╞╪И⌡╤Ф▄┤Д╩╓ CLZ
;;;36     	 * Д╦╬Д╦╙Д╬▀Е╜░О╪▄Е│┤Е╕┌Е▐≤И┤▐date_roundup_pow_of_two 0x09
;;;37     	 *О╪┬Д╨▄Х©⌡Е┬╤Д╦╨О╪ 0000 0000 0000 0000 0000 0000 0000 1001О╪┴, Е█Ёbit3Е▓▄bit0Д╦╨1
;;;38     	 * Е┬≥__clz( (date_roundup_pow_of_two)Г └Е─╪Д╦╨28,Е█ЁФ°─И╚≤Д╫█1 Е┴█И²╒Ф°┴28Д╦╙0,32-28 =3 Д╩ёХ║╗Ф°─И╚≤Д╫█1 Г └ Д╫█Г╫╝
;;;39     	 * 31UL Х║╗Г╓╨ Ф≈═Г╛╕Е▐╥ int Ф∙╟Е╜≈ 31О╪▄Е░╕Е┬≥И╩≤Х╝╓Д╦╨ Ф°┴Г╛╕Е▐╥ int Ф∙╟Е╜≈ 31
;;;40     	 * Х©≥И┤▄Е▐┌Х─┐  FreeRTOS Г └ Е╞╩Ф┴╬И╚≤Г╨╖Д╪≤Е┘┬Г╨╖Д╩╩Е┼║ Г └Е├≥ФЁ∙О╪▄Х╞╕Г╩├Х╖ёИ┤┼Е┬╟Ф°╠Е╥╔Е█ Е╝╒
;;;41     	 * Е█ Е╝╒Е°╟Е²─: http://blog.csdn.net/zhzht19861011/article/details/51418383
;;;42     	 */
;;;43     
;;;44     	return ( 1UL << ( 32UL - ( unsigned int ) __clz( (date_roundup_pow_of_two) ) ) );
000002  fab1f081          CLZ      r0,r1
000006  f1c00220          RSB      r2,r0,#0x20
00000a  2001              MOVS     r0,#1
00000c  4090              LSLS     r0,r0,r2
;;;45     
;;;46     }
00000e  4770              BX       lr
;;;47     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\kfifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_kfifo_c_7dbab9af____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_kfifo_c_7dbab9af____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_kfifo_c_7dbab9af____REVSH|
#line 128
|__asm___7_kfifo_c_7dbab9af____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
