; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\tasks.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\tasks.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I..\..\User\FreeRTOS\Source\include -I..\..\User\FreeRTOS\Source\portable\MemMang -I..\..\User\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\..\User\FreeModbus-V1.5\include -I..\..\User\FreeModbus-V1.5\STM32F103-PORT -I..\..\User\FreeModbus-V1.5\BARE\port -I..\..\User\FreeModbus-V1.5\rtu -IE:\woosiyuan\smarthome\stm32f10x\STM32F103_modbus_rtu\Project\MDK-ARM(uV4)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\tasks.crf ..\..\User\FreeRTOS\Source\tasks.c]
                          THUMB

                          AREA ||i.prvAddCurrentTaskToDelayedList||, CODE, READONLY, ALIGN=2

                  prvAddCurrentTaskToDelayedList PROC
;;;3070   
;;;3071   static void prvAddCurrentTaskToDelayedList( const TickType_t xTimeToWake )
000000  b510              PUSH     {r4,lr}
;;;3072   {
000002  4604              MOV      r4,r0
;;;3073   	/* The list item will be inserted in wake time order. */
;;;3074   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
000004  480e              LDR      r0,|L1.64|
000006  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000008  6044              STR      r4,[r0,#4]
;;;3075   
;;;3076   	if( xTimeToWake < xTickCount )
00000a  480e              LDR      r0,|L1.68|
00000c  6800              LDR      r0,[r0,#0]  ; xTickCount
00000e  4284              CMP      r4,r0
000010  d207              BCS      |L1.34|
;;;3077   	{
;;;3078   		/* Wake time has overflowed.  Place this item in the overflow list. */
;;;3079   		vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
000012  480b              LDR      r0,|L1.64|
000014  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000016  1d09              ADDS     r1,r1,#4
000018  480b              LDR      r0,|L1.72|
00001a  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
00001c  f7fffffe          BL       vListInsert
000020  e00c              B        |L1.60|
                  |L1.34|
;;;3080   	}
;;;3081   	else
;;;3082   	{
;;;3083   		/* The wake time has not overflowed, so the current block list is used. */
;;;3084   		vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xGenericListItem ) );
000022  4807              LDR      r0,|L1.64|
000024  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000026  1d09              ADDS     r1,r1,#4
000028  4808              LDR      r0,|L1.76|
00002a  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
00002c  f7fffffe          BL       vListInsert
;;;3085   
;;;3086   		/* If the task entering the blocked state was placed at the head of the
;;;3087   		list of blocked tasks then xNextTaskUnblockTime needs to be updated
;;;3088   		too. */
;;;3089   		if( xTimeToWake < xNextTaskUnblockTime )
000030  4807              LDR      r0,|L1.80|
000032  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000034  4284              CMP      r4,r0
000036  d201              BCS      |L1.60|
;;;3090   		{
;;;3091   			xNextTaskUnblockTime = xTimeToWake;
000038  4805              LDR      r0,|L1.80|
00003a  6004              STR      r4,[r0,#0]  ; xNextTaskUnblockTime
                  |L1.60|
;;;3092   		}
;;;3093   		else
;;;3094   		{
;;;3095   			mtCOVERAGE_TEST_MARKER();
;;;3096   		}
;;;3097   	}
;;;3098   }
00003c  bd10              POP      {r4,pc}
;;;3099   /*-----------------------------------------------------------*/
                          ENDP

00003e  0000              DCW      0x0000
                  |L1.64|
                          DCD      pxCurrentTCB
                  |L1.68|
                          DCD      xTickCount
                  |L1.72|
                          DCD      pxOverflowDelayedTaskList
                  |L1.76|
                          DCD      pxDelayedTaskList
                  |L1.80|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.prvAllocateTCBAndStack||, CODE, READONLY, ALIGN=1

                  prvAllocateTCBAndStack PROC
;;;3100   
;;;3101   static TCB_t *prvAllocateTCBAndStack( const uint16_t usStackDepth, StackType_t * const puxStackBuffer )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3102   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
;;;3103   TCB_t *pxNewTCB;
;;;3104   
;;;3105   	/* If the stack grows down then allocate the stack then the TCB so the stack
;;;3106   	does not grow into the TCB.  Likewise if the stack grows up then allocate
;;;3107   	the TCB then the stack. */
;;;3108   	#if( portSTACK_GROWTH > 0 )
;;;3109   	{
;;;3110   		/* Allocate space for the TCB.  Where the memory comes from depends on
;;;3111   		the implementation of the port malloc function. */
;;;3112   		pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
;;;3113   
;;;3114   		if( pxNewTCB != NULL )
;;;3115   		{
;;;3116   			/* Allocate space for the stack used by the task being created.
;;;3117   			The base of the stack memory stored in the TCB so the task can
;;;3118   			be deleted later if required. */
;;;3119   			pxNewTCB->pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
;;;3120   
;;;3121   			if( pxNewTCB->pxStack == NULL )
;;;3122   			{
;;;3123   				/* Could not allocate the stack.  Delete the allocated TCB. */
;;;3124   				vPortFree( pxNewTCB );
;;;3125   				pxNewTCB = NULL;
;;;3126   			}
;;;3127   		}
;;;3128   	}
;;;3129   	#else /* portSTACK_GROWTH */
;;;3130   	{
;;;3131   	StackType_t *pxStack;
;;;3132   
;;;3133   		/* Allocate space for the stack used by the task being created. */
;;;3134   		pxStack = ( StackType_t * ) pvPortMallocAligned( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ), puxStackBuffer ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000008  b91f              CBNZ     r7,|L2.18|
00000a  00b0              LSLS     r0,r6,#2
00000c  f7fffffe          BL       pvPortMalloc
000010  e000              B        |L2.20|
                  |L2.18|
000012  4638              MOV      r0,r7
                  |L2.20|
000014  4605              MOV      r5,r0
;;;3135   
;;;3136   		if( pxStack != NULL )
000016  b155              CBZ      r5,|L2.46|
;;;3137   		{
;;;3138   			/* Allocate space for the TCB.  Where the memory comes from depends
;;;3139   			on the implementation of the port malloc function. */
;;;3140   			pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
000018  204c              MOVS     r0,#0x4c
00001a  f7fffffe          BL       pvPortMalloc
00001e  4604              MOV      r4,r0
;;;3141   
;;;3142   			if( pxNewTCB != NULL )
000020  b10c              CBZ      r4,|L2.38|
;;;3143   			{
;;;3144   				/* Store the stack location in the TCB. */
;;;3145   				pxNewTCB->pxStack = pxStack;
000022  6325              STR      r5,[r4,#0x30]
000024  e004              B        |L2.48|
                  |L2.38|
;;;3146   			}
;;;3147   			else
;;;3148   			{
;;;3149   				/* The stack cannot be used as the TCB was not created.  Free it
;;;3150   				again. */
;;;3151   				vPortFree( pxStack );
000026  4628              MOV      r0,r5
000028  f7fffffe          BL       vPortFree
00002c  e000              B        |L2.48|
                  |L2.46|
;;;3152   			}
;;;3153   		}
;;;3154   		else
;;;3155   		{
;;;3156   			pxNewTCB = NULL;
00002e  2400              MOVS     r4,#0
                  |L2.48|
;;;3157   		}
;;;3158   	}
;;;3159   	#endif /* portSTACK_GROWTH */
;;;3160   
;;;3161   	if( pxNewTCB != NULL )
;;;3162   	{
;;;3163   		/* Avoid dependency on memset() if it is not required. */
;;;3164   		#if( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) )
;;;3165   		{
;;;3166   			/* Just to help debugging. */
;;;3167   			( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( StackType_t ) );
;;;3168   		}
;;;3169   		#endif /* ( ( configCHECK_FOR_STACK_OVERFLOW > 1 ) || ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) ) ) */
;;;3170   	}
;;;3171   
;;;3172   	return pxNewTCB;
000030  4620              MOV      r0,r4
;;;3173   }
000032  e8bd81f0          POP      {r4-r8,pc}
;;;3174   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvCheckTasksWaitingTermination||, CODE, READONLY, ALIGN=2

                  prvCheckTasksWaitingTermination PROC
;;;3029   
;;;3030   static void prvCheckTasksWaitingTermination( void )
000000  b570              PUSH     {r4-r6,lr}
;;;3031   {
;;;3032   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3033   	{
;;;3034   		BaseType_t xListIsEmpty;
;;;3035   
;;;3036   		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
;;;3037   		too often in the idle task. */
;;;3038   		while( uxTasksDeleted > ( UBaseType_t ) 0U )
000002  e023              B        |L3.76|
                  |L3.4|
;;;3039   		{
;;;3040   			vTaskSuspendAll();
000004  f7fffffe          BL       vTaskSuspendAll
;;;3041   			{
;;;3042   				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
000008  4813              LDR      r0,|L3.88|
00000a  6800              LDR      r0,[r0,#0]  ; xTasksWaitingTermination
00000c  b908              CBNZ     r0,|L3.18|
00000e  2001              MOVS     r0,#1
000010  e000              B        |L3.20|
                  |L3.18|
000012  2000              MOVS     r0,#0
                  |L3.20|
000014  4605              MOV      r5,r0
;;;3043   			}
;;;3044   			( void ) xTaskResumeAll();
000016  f7fffffe          BL       xTaskResumeAll
;;;3045   
;;;3046   			if( xListIsEmpty == pdFALSE )
00001a  b9bd              CBNZ     r5,|L3.76|
;;;3047   			{
;;;3048   				TCB_t *pxTCB;
;;;3049   
;;;3050   				taskENTER_CRITICAL();
00001c  f7fffffe          BL       vPortEnterCritical
;;;3051   				{
;;;3052   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
000020  480d              LDR      r0,|L3.88|
000022  68c0              LDR      r0,[r0,#0xc]
000024  68c4              LDR      r4,[r0,#0xc]
;;;3053   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000026  1d20              ADDS     r0,r4,#4
000028  f7fffffe          BL       uxListRemove
;;;3054   					--uxCurrentNumberOfTasks;
00002c  480b              LDR      r0,|L3.92|
00002e  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000030  1e40              SUBS     r0,r0,#1
000032  490a              LDR      r1,|L3.92|
000034  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;3055   					--uxTasksDeleted;
000036  480a              LDR      r0,|L3.96|
000038  6800              LDR      r0,[r0,#0]  ; uxTasksDeleted
00003a  1e40              SUBS     r0,r0,#1
00003c  4908              LDR      r1,|L3.96|
00003e  6008              STR      r0,[r1,#0]  ; uxTasksDeleted
;;;3056   				}
;;;3057   				taskEXIT_CRITICAL();
000040  f7fffffe          BL       vPortExitCritical
;;;3058   
;;;3059   				prvDeleteTCB( pxTCB );
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       prvDeleteTCB
;;;3060   			}
00004a  bf00              NOP      
                  |L3.76|
00004c  4804              LDR      r0,|L3.96|
00004e  6800              LDR      r0,[r0,#0]            ;3038  ; uxTasksDeleted
000050  2800              CMP      r0,#0                 ;3038
000052  d1d7              BNE      |L3.4|
;;;3061   			else
;;;3062   			{
;;;3063   				mtCOVERAGE_TEST_MARKER();
;;;3064   			}
;;;3065   		}
;;;3066   	}
;;;3067   	#endif /* vTaskDelete */
;;;3068   }
000054  bd70              POP      {r4-r6,pc}
;;;3069   /*-----------------------------------------------------------*/
                          ENDP

000056  0000              DCW      0x0000
                  |L3.88|
                          DCD      xTasksWaitingTermination
                  |L3.92|
                          DCD      uxCurrentNumberOfTasks
                  |L3.96|
                          DCD      uxTasksDeleted

                          AREA ||i.prvDeleteTCB||, CODE, READONLY, ALIGN=1

                  prvDeleteTCB PROC
;;;3310   
;;;3311   	static void prvDeleteTCB( TCB_t *pxTCB )
000000  b510              PUSH     {r4,lr}
;;;3312   	{
000002  4604              MOV      r4,r0
;;;3313   		/* This call is required specifically for the TriCore port.  It must be
;;;3314   		above the vPortFree() calls.  The call is also used by ports/demos that
;;;3315   		want to allocate and clean RAM statically. */
;;;3316   		portCLEAN_UP_TCB( pxTCB );
;;;3317   
;;;3318   		/* Free up the memory allocated by the scheduler for the task.  It is up
;;;3319   		to the task to free any memory allocated at the application level. */
;;;3320   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;3321   		{
;;;3322   			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
;;;3323   		}
;;;3324   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;3325   
;;;3326   		#if( portUSING_MPU_WRAPPERS == 1 )
;;;3327   		{
;;;3328   			/* Only free the stack if it was allocated dynamically in the first
;;;3329   			place. */
;;;3330   			if( pxTCB->xUsingStaticallyAllocatedStack == pdFALSE )
;;;3331   			{
;;;3332   				vPortFreeAligned( pxTCB->pxStack );
;;;3333   			}
;;;3334   		}
;;;3335   		#else
;;;3336   		{
;;;3337   			vPortFreeAligned( pxTCB->pxStack );
000004  6b20              LDR      r0,[r4,#0x30]
000006  f7fffffe          BL       vPortFree
;;;3338   		}
;;;3339   		#endif
;;;3340   
;;;3341   		vPortFree( pxTCB );
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       vPortFree
;;;3342   	}
000010  bd10              POP      {r4,pc}
;;;3343   
                          ENDP


                          AREA ||i.prvIdleTask||, CODE, READONLY, ALIGN=2

                  prvIdleTask PROC
;;;2689    */
;;;2690   static portTASK_FUNCTION( prvIdleTask, pvParameters )
000000  bf00              NOP      
                  |L5.2|
;;;2691   {
;;;2692   	/* Stop warnings. */
;;;2693   	( void ) pvParameters;
;;;2694   
;;;2695   	for( ;; )
;;;2696   	{
;;;2697   		/* See if any tasks have been deleted. */
;;;2698   		prvCheckTasksWaitingTermination();
000002  f7fffffe          BL       prvCheckTasksWaitingTermination
;;;2699   
;;;2700   		#if ( configUSE_PREEMPTION == 0 )
;;;2701   		{
;;;2702   			/* If we are not using preemption we keep forcing a task switch to
;;;2703   			see if any other task has become available.  If we are using
;;;2704   			preemption we don't need to do this as any task becoming available
;;;2705   			will automatically get the processor anyway. */
;;;2706   			taskYIELD();
;;;2707   		}
;;;2708   		#endif /* configUSE_PREEMPTION */
;;;2709   
;;;2710   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) )
;;;2711   		{
;;;2712   			/* When using preemption tasks of equal priority will be
;;;2713   			timesliced.  If a task that is sharing the idle priority is ready
;;;2714   			to run then the idle task should yield before the end of the
;;;2715   			timeslice.
;;;2716   
;;;2717   			A critical region is not required here as we are just reading from
;;;2718   			the list, and an occasional incorrect value will not matter.  If
;;;2719   			the ready list at the idle priority contains more than one task
;;;2720   			then a task other than the idle task is ready to execute. */
;;;2721   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
000006  4803              LDR      r0,|L5.20|
000008  6800              LDR      r0,[r0,#0]  ; pxReadyTasksLists
00000a  2801              CMP      r0,#1
00000c  d9f9              BLS      |L5.2|
;;;2722   			{
;;;2723   				taskYIELD();
00000e  f7fffffe          BL       vPortYield
000012  e7f6              B        |L5.2|
;;;2724   			}
;;;2725   			else
;;;2726   			{
;;;2727   				mtCOVERAGE_TEST_MARKER();
;;;2728   			}
;;;2729   		}
;;;2730   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configIDLE_SHOULD_YIELD == 1 ) ) */
;;;2731   
;;;2732   		#if ( configUSE_IDLE_HOOK == 1 )
;;;2733   		{
;;;2734   			extern void vApplicationIdleHook( void );
;;;2735   
;;;2736   			/* Call the user defined function from within the idle task.  This
;;;2737   			allows the application designer to add background functionality
;;;2738   			without the overhead of a separate task.
;;;2739   			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
;;;2740   			CALL A FUNCTION THAT MIGHT BLOCK. */
;;;2741   			vApplicationIdleHook();
;;;2742   		}
;;;2743   		#endif /* configUSE_IDLE_HOOK */
;;;2744   
;;;2745   		/* This conditional compilation should use inequality to 0, not equality
;;;2746   		to 1.  This is to ensure portSUPPRESS_TICKS_AND_SLEEP() is called when
;;;2747   		user defined low power mode	implementations require
;;;2748   		configUSE_TICKLESS_IDLE to be set to a value other than 1. */
;;;2749   		#if ( configUSE_TICKLESS_IDLE != 0 )
;;;2750   		{
;;;2751   		TickType_t xExpectedIdleTime;
;;;2752   
;;;2753   			/* It is not desirable to suspend then resume the scheduler on
;;;2754   			each iteration of the idle task.  Therefore, a preliminary
;;;2755   			test of the expected idle time is performed without the
;;;2756   			scheduler suspended.  The result here is not necessarily
;;;2757   			valid. */
;;;2758   			xExpectedIdleTime = prvGetExpectedIdleTime();
;;;2759   
;;;2760   			if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;2761   			{
;;;2762   				vTaskSuspendAll();
;;;2763   				{
;;;2764   					/* Now the scheduler is suspended, the expected idle
;;;2765   					time can be sampled again, and this time its value can
;;;2766   					be used. */
;;;2767   					configASSERT( xNextTaskUnblockTime >= xTickCount );
;;;2768   					xExpectedIdleTime = prvGetExpectedIdleTime();
;;;2769   
;;;2770   					if( xExpectedIdleTime >= configEXPECTED_IDLE_TIME_BEFORE_SLEEP )
;;;2771   					{
;;;2772   						traceLOW_POWER_IDLE_BEGIN();
;;;2773   						portSUPPRESS_TICKS_AND_SLEEP( xExpectedIdleTime );
;;;2774   						traceLOW_POWER_IDLE_END();
;;;2775   					}
;;;2776   					else
;;;2777   					{
;;;2778   						mtCOVERAGE_TEST_MARKER();
;;;2779   					}
;;;2780   				}
;;;2781   				( void ) xTaskResumeAll();
;;;2782   			}
;;;2783   			else
;;;2784   			{
;;;2785   				mtCOVERAGE_TEST_MARKER();
;;;2786   			}
;;;2787   		}
;;;2788   		#endif /* configUSE_TICKLESS_IDLE */
;;;2789   	}
;;;2790   }
;;;2791   /*-----------------------------------------------------------*/
                          ENDP

                  |L5.20|
                          DCD      pxReadyTasksLists

                          AREA ||i.prvInitialiseTCBVariables||, CODE, READONLY, ALIGN=1

                  prvInitialiseTCBVariables PROC
;;;2832   
;;;2833   static void prvInitialiseTCBVariables( TCB_t * const pxTCB, const char * const pcName, UBaseType_t uxPriority, const MemoryRegion_t * const xRegions, const uint16_t usStackDepth ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;2834   {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
000008  4616              MOV      r6,r2
00000a  4699              MOV      r9,r3
00000c  f8dd8020          LDR      r8,[sp,#0x20]
;;;2835   UBaseType_t x;
;;;2836   
;;;2837   	/* Store the task name in the TCB. */
;;;2838   	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
000010  2500              MOVS     r5,#0
000012  e007              B        |L6.36|
                  |L6.20|
;;;2839   	{
;;;2840   		pxTCB->pcTaskName[ x ] = pcName[ x ];
000014  5d79              LDRB     r1,[r7,r5]
000016  f1040034          ADD      r0,r4,#0x34
00001a  5541              STRB     r1,[r0,r5]
;;;2841   
;;;2842   		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
;;;2843   		configMAX_TASK_NAME_LEN characters just in case the memory after the
;;;2844   		string is not accessible (extremely unlikely). */
;;;2845   		if( pcName[ x ] == 0x00 )
00001c  5d78              LDRB     r0,[r7,r5]
00001e  b900              CBNZ     r0,|L6.34|
;;;2846   		{
;;;2847   			break;
000020  e002              B        |L6.40|
                  |L6.34|
000022  1c6d              ADDS     r5,r5,#1              ;2838
                  |L6.36|
000024  2d10              CMP      r5,#0x10              ;2838
000026  d3f5              BCC      |L6.20|
                  |L6.40|
000028  bf00              NOP      
;;;2848   		}
;;;2849   		else
;;;2850   		{
;;;2851   			mtCOVERAGE_TEST_MARKER();
;;;2852   		}
;;;2853   	}
;;;2854   
;;;2855   	/* Ensure the name string is terminated in the case that the string length
;;;2856   	was greater or equal to configMAX_TASK_NAME_LEN. */
;;;2857   	pxTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
00002a  2100              MOVS     r1,#0
00002c  2043              MOVS     r0,#0x43
00002e  5501              STRB     r1,[r0,r4]
;;;2858   
;;;2859   	/* This is used as an array index so must ensure it's not too large.  First
;;;2860   	remove the privilege bit if one is present. */
;;;2861   	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
000030  2e05              CMP      r6,#5
000032  d300              BCC      |L6.54|
;;;2862   	{
;;;2863   		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
000034  2604              MOVS     r6,#4
                  |L6.54|
;;;2864   	}
;;;2865   	else
;;;2866   	{
;;;2867   		mtCOVERAGE_TEST_MARKER();
;;;2868   	}
;;;2869   
;;;2870   	pxTCB->uxPriority = uxPriority;
000036  62e6              STR      r6,[r4,#0x2c]
;;;2871   	#if ( configUSE_MUTEXES == 1 )
;;;2872   	{
;;;2873   		pxTCB->uxBasePriority = uxPriority;
;;;2874   		pxTCB->uxMutexesHeld = 0;
;;;2875   	}
;;;2876   	#endif /* configUSE_MUTEXES */
;;;2877   
;;;2878   	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
000038  1d20              ADDS     r0,r4,#4
00003a  f7fffffe          BL       vListInitialiseItem
;;;2879   	vListInitialiseItem( &( pxTCB->xEventListItem ) );
00003e  f1040018          ADD      r0,r4,#0x18
000042  f7fffffe          BL       vListInitialiseItem
;;;2880   
;;;2881   	/* Set the pxTCB as a link back from the ListItem_t.  This is so we can get
;;;2882   	back to	the containing TCB from a generic item in a list. */
;;;2883   	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
000046  6124              STR      r4,[r4,#0x10]
;;;2884   
;;;2885   	/* Event lists are always in priority order. */
;;;2886   	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000048  f1c60005          RSB      r0,r6,#5
00004c  61a0              STR      r0,[r4,#0x18]
;;;2887   	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
00004e  6264              STR      r4,[r4,#0x24]
;;;2888   
;;;2889   	#if ( portCRITICAL_NESTING_IN_TCB == 1 )
;;;2890   	{
;;;2891   		pxTCB->uxCriticalNesting = ( UBaseType_t ) 0U;
;;;2892   	}
;;;2893   	#endif /* portCRITICAL_NESTING_IN_TCB */
;;;2894   
;;;2895   	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
;;;2896   	{
;;;2897   		pxTCB->pxTaskTag = NULL;
;;;2898   	}
;;;2899   	#endif /* configUSE_APPLICATION_TASK_TAG */
;;;2900   
;;;2901   	#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2902   	{
;;;2903   		pxTCB->ulRunTimeCounter = 0UL;
;;;2904   	}
;;;2905   	#endif /* configGENERATE_RUN_TIME_STATS */
;;;2906   
;;;2907   	#if ( portUSING_MPU_WRAPPERS == 1 )
;;;2908   	{
;;;2909   		vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, pxTCB->pxStack, usStackDepth );
;;;2910   	}
;;;2911   	#else /* portUSING_MPU_WRAPPERS */
;;;2912   	{
;;;2913   		( void ) xRegions;
;;;2914   		( void ) usStackDepth;
;;;2915   	}
;;;2916   	#endif /* portUSING_MPU_WRAPPERS */
;;;2917   
;;;2918   	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
;;;2919   	{
;;;2920   		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
;;;2921   		{
;;;2922   			pxTCB->pvThreadLocalStoragePointers[ x ] = NULL;
;;;2923   		}
;;;2924   	}
;;;2925   	#endif
;;;2926   
;;;2927   	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
;;;2928   	{
;;;2929   		pxTCB->ulNotifiedValue = 0;
000050  2000              MOVS     r0,#0
000052  6460              STR      r0,[r4,#0x44]
;;;2930   		pxTCB->eNotifyState = eNotWaitingNotification;
000054  f8840048          STRB     r0,[r4,#0x48]
;;;2931   	}
;;;2932   	#endif
;;;2933   
;;;2934   	#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2935   	{
;;;2936   		/* Initialise this task's Newlib reent structure. */
;;;2937   		_REENT_INIT_PTR( ( &( pxTCB->xNewLib_reent ) ) );
;;;2938   	}
;;;2939   	#endif /* configUSE_NEWLIB_REENTRANT */
;;;2940   }
000058  e8bd87f0          POP      {r4-r10,pc}
;;;2941   /*-----------------------------------------------------------*/
                          ENDP


                          AREA ||i.prvInitialiseTaskLists||, CODE, READONLY, ALIGN=2

                  prvInitialiseTaskLists PROC
;;;2997   
;;;2998   static void prvInitialiseTaskLists( void )
000000  b510              PUSH     {r4,lr}
;;;2999   {
;;;3000   UBaseType_t uxPriority;
;;;3001   
;;;3002   	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
000002  2400              MOVS     r4,#0
000004  e007              B        |L7.22|
                  |L7.6|
;;;3003   	{
;;;3004   		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
000006  eb040184          ADD      r1,r4,r4,LSL #2
00000a  4a0d              LDR      r2,|L7.64|
00000c  eb020081          ADD      r0,r2,r1,LSL #2
000010  f7fffffe          BL       vListInitialise
000014  1c64              ADDS     r4,r4,#1              ;3002
                  |L7.22|
000016  2c05              CMP      r4,#5                 ;3002
000018  d3f5              BCC      |L7.6|
;;;3005   	}
;;;3006   
;;;3007   	vListInitialise( &xDelayedTaskList1 );
00001a  480a              LDR      r0,|L7.68|
00001c  f7fffffe          BL       vListInitialise
;;;3008   	vListInitialise( &xDelayedTaskList2 );
000020  4809              LDR      r0,|L7.72|
000022  f7fffffe          BL       vListInitialise
;;;3009   	vListInitialise( &xPendingReadyList );
000026  4809              LDR      r0,|L7.76|
000028  f7fffffe          BL       vListInitialise
;;;3010   
;;;3011   	#if ( INCLUDE_vTaskDelete == 1 )
;;;3012   	{
;;;3013   		vListInitialise( &xTasksWaitingTermination );
00002c  4808              LDR      r0,|L7.80|
00002e  f7fffffe          BL       vListInitialise
;;;3014   	}
;;;3015   	#endif /* INCLUDE_vTaskDelete */
;;;3016   
;;;3017   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;3018   	{
;;;3019   		vListInitialise( &xSuspendedTaskList );
;;;3020   	}
;;;3021   	#endif /* INCLUDE_vTaskSuspend */
;;;3022   
;;;3023   	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
;;;3024   	using list2. */
;;;3025   	pxDelayedTaskList = &xDelayedTaskList1;
000032  4804              LDR      r0,|L7.68|
000034  4907              LDR      r1,|L7.84|
000036  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
;;;3026   	pxOverflowDelayedTaskList = &xDelayedTaskList2;
000038  4803              LDR      r0,|L7.72|
00003a  4907              LDR      r1,|L7.88|
00003c  6008              STR      r0,[r1,#0]  ; pxOverflowDelayedTaskList
;;;3027   }
00003e  bd10              POP      {r4,pc}
;;;3028   /*-----------------------------------------------------------*/
                          ENDP

                  |L7.64|
                          DCD      pxReadyTasksLists
                  |L7.68|
                          DCD      xDelayedTaskList1
                  |L7.72|
                          DCD      xDelayedTaskList2
                  |L7.76|
                          DCD      xPendingReadyList
                  |L7.80|
                          DCD      xTasksWaitingTermination
                  |L7.84|
                          DCD      pxDelayedTaskList
                  |L7.88|
                          DCD      pxOverflowDelayedTaskList

                          AREA ||i.prvResetNextTaskUnblockTime||, CODE, READONLY, ALIGN=2

                  prvResetNextTaskUnblockTime PROC
;;;3346   
;;;3347   static void prvResetNextTaskUnblockTime( void )
000000  490a              LDR      r1,|L8.44|
;;;3348   {
;;;3349   TCB_t *pxTCB;
;;;3350   
;;;3351   	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
000002  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
000004  6809              LDR      r1,[r1,#0]
000006  b909              CBNZ     r1,|L8.12|
000008  2101              MOVS     r1,#1
00000a  e000              B        |L8.14|
                  |L8.12|
00000c  2100              MOVS     r1,#0
                  |L8.14|
00000e  b121              CBZ      r1,|L8.26|
;;;3352   	{
;;;3353   		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
;;;3354   		the maximum possible value so it is	extremely unlikely that the
;;;3355   		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
;;;3356   		there is an item in the delayed list. */
;;;3357   		xNextTaskUnblockTime = portMAX_DELAY;
000010  f04f31ff          MOV      r1,#0xffffffff
000014  4a06              LDR      r2,|L8.48|
000016  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
000018  e006              B        |L8.40|
                  |L8.26|
;;;3358   	}
;;;3359   	else
;;;3360   	{
;;;3361   		/* The new current delayed list is not empty, get the value of
;;;3362   		the item at the head of the delayed list.  This is the time at
;;;3363   		which the task at the head of the delayed list should be removed
;;;3364   		from the Blocked state. */
;;;3365   		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
00001a  4904              LDR      r1,|L8.44|
00001c  6809              LDR      r1,[r1,#0]  ; pxDelayedTaskList
00001e  68c9              LDR      r1,[r1,#0xc]
000020  68c8              LDR      r0,[r1,#0xc]
;;;3366   		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xGenericListItem ) );
000022  4a03              LDR      r2,|L8.48|
000024  6841              LDR      r1,[r0,#4]
000026  6011              STR      r1,[r2,#0]  ; xNextTaskUnblockTime
                  |L8.40|
;;;3367   	}
;;;3368   }
000028  4770              BX       lr
;;;3369   /*-----------------------------------------------------------*/
                          ENDP

00002a  0000              DCW      0x0000
                  |L8.44|
                          DCD      pxDelayedTaskList
                  |L8.48|
                          DCD      xNextTaskUnblockTime

                          AREA ||i.ulTaskNotifyTake||, CODE, READONLY, ALIGN=2

                  ulTaskNotifyTake PROC
;;;3900   
;;;3901   	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3902   	{
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
;;;3903   	TickType_t xTimeToWake;
;;;3904   	uint32_t ulReturn;
;;;3905   
;;;3906   		taskENTER_CRITICAL();
000008  f7fffffe          BL       vPortEnterCritical
;;;3907   		{
;;;3908   			/* Only block if the notification count is not already non-zero. */
;;;3909   			if( pxCurrentTCB->ulNotifiedValue == 0UL )
00000c  4820              LDR      r0,|L9.144|
00000e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000010  6c40              LDR      r0,[r0,#0x44]
000012  b9f0              CBNZ     r0,|L9.82|
;;;3910   			{
;;;3911   				/* Mark this task as waiting for a notification. */
;;;3912   				pxCurrentTCB->eNotifyState = eWaitingNotification;
000014  2001              MOVS     r0,#1
000016  491e              LDR      r1,|L9.144|
000018  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00001a  f8810048          STRB     r0,[r1,#0x48]
;;;3913   
;;;3914   				if( xTicksToWait > ( TickType_t ) 0 )
00001e  b1c4              CBZ      r4,|L9.82|
;;;3915   				{
;;;3916   					/* The task is going to block.  First it must be removed
;;;3917   					from the ready list. */
;;;3918   					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000020  481b              LDR      r0,|L9.144|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  1d00              ADDS     r0,r0,#4
000026  f7fffffe          BL       uxListRemove
00002a  b950              CBNZ     r0,|L9.66|
;;;3919   					{
;;;3920   						/* The current task must be in a ready list, so there is
;;;3921   						no need to check, and the port reset macro can be called
;;;3922   						directly. */
;;;3923   						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00002c  4818              LDR      r0,|L9.144|
00002e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000030  f890102c          LDRB     r1,[r0,#0x2c]
000034  2001              MOVS     r0,#1
000036  4088              LSLS     r0,r0,r1
000038  4916              LDR      r1,|L9.148|
00003a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00003c  4381              BICS     r1,r1,r0
00003e  4815              LDR      r0,|L9.148|
000040  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L9.66|
;;;3924   					}
;;;3925   					else
;;;3926   					{
;;;3927   						mtCOVERAGE_TEST_MARKER();
;;;3928   					}
;;;3929   
;;;3930   					#if ( INCLUDE_vTaskSuspend == 1 )
;;;3931   					{
;;;3932   						if( xTicksToWait == portMAX_DELAY )
;;;3933   						{
;;;3934   							/* Add the task to the suspended task list instead
;;;3935   							of a delayed task list to ensure the task is not
;;;3936   							woken by a timing event.  It will block
;;;3937   							indefinitely. */
;;;3938   							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;3939   						}
;;;3940   						else
;;;3941   						{
;;;3942   							/* Calculate the time at which the task should be
;;;3943   							woken if no notification events occur.  This may
;;;3944   							overflow but this doesn't matter, the scheduler will
;;;3945   							handle it. */
;;;3946   							xTimeToWake = xTickCount + xTicksToWait;
;;;3947   							prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;3948   						}
;;;3949   					}
;;;3950   					#else /* INCLUDE_vTaskSuspend */
;;;3951   					{
;;;3952   							/* Calculate the time at which the task should be
;;;3953   							woken if the event does not occur.  This may
;;;3954   							overflow but this doesn't matter, the scheduler will
;;;3955   							handle it. */
;;;3956   							xTimeToWake = xTickCount + xTicksToWait;
000042  4815              LDR      r0,|L9.152|
000044  6800              LDR      r0,[r0,#0]  ; xTickCount
000046  1907              ADDS     r7,r0,r4
;;;3957   							prvAddCurrentTaskToDelayedList( xTimeToWake );
000048  4638              MOV      r0,r7
00004a  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;3958   					}
;;;3959   					#endif /* INCLUDE_vTaskSuspend */
;;;3960   
;;;3961   					traceTASK_NOTIFY_TAKE_BLOCK();
;;;3962   
;;;3963   					/* All ports are written to allow a yield in a critical
;;;3964   					section (some will yield immediately, others wait until the
;;;3965   					critical section exits) - but it is not something that
;;;3966   					application code should ever do. */
;;;3967   					portYIELD_WITHIN_API();
00004e  f7fffffe          BL       vPortYield
                  |L9.82|
;;;3968   				}
;;;3969   				else
;;;3970   				{
;;;3971   					mtCOVERAGE_TEST_MARKER();
;;;3972   				}
;;;3973   			}
;;;3974   			else
;;;3975   			{
;;;3976   				mtCOVERAGE_TEST_MARKER();
;;;3977   			}
;;;3978   		}
;;;3979   		taskEXIT_CRITICAL();
000052  f7fffffe          BL       vPortExitCritical
;;;3980   
;;;3981   		taskENTER_CRITICAL();
000056  f7fffffe          BL       vPortEnterCritical
;;;3982   		{
;;;3983   			traceTASK_NOTIFY_TAKE();
;;;3984   			ulReturn = pxCurrentTCB->ulNotifiedValue;
00005a  480d              LDR      r0,|L9.144|
00005c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00005e  6c45              LDR      r5,[r0,#0x44]
;;;3985   
;;;3986   			if( ulReturn != 0UL )
000060  b165              CBZ      r5,|L9.124|
;;;3987   			{
;;;3988   				if( xClearCountOnExit != pdFALSE )
000062  b126              CBZ      r6,|L9.110|
;;;3989   				{
;;;3990   					pxCurrentTCB->ulNotifiedValue = 0UL;
000064  2000              MOVS     r0,#0
000066  490a              LDR      r1,|L9.144|
000068  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00006a  6448              STR      r0,[r1,#0x44]
00006c  e006              B        |L9.124|
                  |L9.110|
;;;3991   				}
;;;3992   				else
;;;3993   				{
;;;3994   					( pxCurrentTCB->ulNotifiedValue )--;
00006e  4908              LDR      r1,|L9.144|
000070  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000072  f1010044          ADD      r0,r1,#0x44
000076  6c49              LDR      r1,[r1,#0x44]
000078  1e49              SUBS     r1,r1,#1
00007a  6001              STR      r1,[r0,#0]
                  |L9.124|
;;;3995   				}
;;;3996   			}
;;;3997   			else
;;;3998   			{
;;;3999   				mtCOVERAGE_TEST_MARKER();
;;;4000   			}
;;;4001   
;;;4002   			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
00007c  2000              MOVS     r0,#0
00007e  4904              LDR      r1,|L9.144|
000080  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000082  f8810048          STRB     r0,[r1,#0x48]
;;;4003   		}
;;;4004   		taskEXIT_CRITICAL();
000086  f7fffffe          BL       vPortExitCritical
;;;4005   
;;;4006   		return ulReturn;
00008a  4628              MOV      r0,r5
;;;4007   	}
00008c  e8bd81f0          POP      {r4-r8,pc}
;;;4008   
                          ENDP

                  |L9.144|
                          DCD      pxCurrentTCB
                  |L9.148|
                          DCD      uxTopReadyPriority
                  |L9.152|
                          DCD      xTickCount

                          AREA ||i.uxTaskGetNumberOfTasks||, CODE, READONLY, ALIGN=2

                  uxTaskGetNumberOfTasks PROC
;;;1809   
;;;1810   UBaseType_t uxTaskGetNumberOfTasks( void )
000000  4801              LDR      r0,|L10.8|
;;;1811   {
;;;1812   	/* A critical section is not required because the variables are of type
;;;1813   	BaseType_t. */
;;;1814   	return uxCurrentNumberOfTasks;
000002  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
;;;1815   }
000004  4770              BX       lr
;;;1816   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L10.8|
                          DCD      uxCurrentNumberOfTasks

                          AREA ||i.uxTaskResetEventItemValue||, CODE, READONLY, ALIGN=2

                  uxTaskResetEventItemValue PROC
;;;3867   
;;;3868   TickType_t uxTaskResetEventItemValue( void )
000000  4905              LDR      r1,|L11.24|
;;;3869   {
;;;3870   TickType_t uxReturn;
;;;3871   
;;;3872   	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
000002  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000004  6988              LDR      r0,[r1,#0x18]
;;;3873   
;;;3874   	/* Reset the event list item to its normal value - so it can be used with
;;;3875   	queues and semaphores. */
;;;3876   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
000006  4904              LDR      r1,|L11.24|
000008  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
00000a  6ac9              LDR      r1,[r1,#0x2c]
00000c  f1c10105          RSB      r1,r1,#5
000010  4a01              LDR      r2,|L11.24|
000012  6812              LDR      r2,[r2,#0]  ; pxCurrentTCB
000014  6191              STR      r1,[r2,#0x18]
;;;3877   
;;;3878   	return uxReturn;
;;;3879   }
000016  4770              BX       lr
;;;3880   /*-----------------------------------------------------------*/
                          ENDP

                  |L11.24|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskDelay||, CODE, READONLY, ALIGN=2

                  vTaskDelay PROC
;;;921    
;;;922    	void vTaskDelay( const TickType_t xTicksToDelay )
000000  b570              PUSH     {r4-r6,lr}
;;;923    	{
000002  4604              MOV      r4,r0
;;;924    	TickType_t xTimeToWake;
;;;925    	BaseType_t xAlreadyYielded = pdFALSE;
000004  2600              MOVS     r6,#0
;;;926    
;;;927    
;;;928    		/* A delay time of zero just forces a reschedule. */
;;;929    		if( xTicksToDelay > ( TickType_t ) 0U )
000006  b1dc              CBZ      r4,|L12.64|
;;;930    		{
;;;931    			configASSERT( uxSchedulerSuspended == 0 );
;;;932    			vTaskSuspendAll();
000008  f7fffffe          BL       vTaskSuspendAll
;;;933    			{
;;;934    				traceTASK_DELAY();
;;;935    
;;;936    				/* A task that is removed from the event list while the
;;;937    				scheduler is suspended will not get placed in the ready
;;;938    				list or removed from the blocked list until the scheduler
;;;939    				is resumed.
;;;940    
;;;941    				This task cannot be in an event list as it is the currently
;;;942    				executing task. */
;;;943    
;;;944    				/* Calculate the time to wake - this may overflow but this is
;;;945    				not a problem. */
;;;946    				xTimeToWake = xTickCount + xTicksToDelay;
00000c  480e              LDR      r0,|L12.72|
00000e  6800              LDR      r0,[r0,#0]  ; xTickCount
000010  1905              ADDS     r5,r0,r4
;;;947    
;;;948    				/* We must remove ourselves from the ready list before adding
;;;949    				ourselves to the blocked list as the same list item is used for
;;;950    				both lists. */
;;;951    				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000012  480e              LDR      r0,|L12.76|
000014  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000016  1d00              ADDS     r0,r0,#4
000018  f7fffffe          BL       uxListRemove
00001c  b950              CBNZ     r0,|L12.52|
;;;952    				{
;;;953    					/* The current task must be in a ready list, so there is
;;;954    					no need to check, and the port reset macro can be called
;;;955    					directly. */
;;;956    					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00001e  480b              LDR      r0,|L12.76|
000020  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000022  f890102c          LDRB     r1,[r0,#0x2c]
000026  2001              MOVS     r0,#1
000028  4088              LSLS     r0,r0,r1
00002a  4909              LDR      r1,|L12.80|
00002c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00002e  4381              BICS     r1,r1,r0
000030  4807              LDR      r0,|L12.80|
000032  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L12.52|
;;;957    				}
;;;958    				else
;;;959    				{
;;;960    					mtCOVERAGE_TEST_MARKER();
;;;961    				}
;;;962    				prvAddCurrentTaskToDelayedList( xTimeToWake );
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;963    			}
;;;964    			xAlreadyYielded = xTaskResumeAll();
00003a  f7fffffe          BL       xTaskResumeAll
00003e  4606              MOV      r6,r0
                  |L12.64|
;;;965    		}
;;;966    		else
;;;967    		{
;;;968    			mtCOVERAGE_TEST_MARKER();
;;;969    		}
;;;970    
;;;971    		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;972    		have put ourselves to sleep. */
;;;973    		if( xAlreadyYielded == pdFALSE )
000040  b90e              CBNZ     r6,|L12.70|
;;;974    		{
;;;975    			portYIELD_WITHIN_API();
000042  f7fffffe          BL       vPortYield
                  |L12.70|
;;;976    		}
;;;977    		else
;;;978    		{
;;;979    			mtCOVERAGE_TEST_MARKER();
;;;980    		}
;;;981    	}
000046  bd70              POP      {r4-r6,pc}
;;;982    
                          ENDP

                  |L12.72|
                          DCD      xTickCount
                  |L12.76|
                          DCD      pxCurrentTCB
                  |L12.80|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskDelayUntil||, CODE, READONLY, ALIGN=2

                  vTaskDelayUntil PROC
;;;825    
;;;826    	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;827    	{
000004  4604              MOV      r4,r0
000006  4688              MOV      r8,r1
;;;828    	TickType_t xTimeToWake;
;;;829    	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
000008  f04f0900          MOV      r9,#0
;;;830    
;;;831    		configASSERT( pxPreviousWakeTime );
;;;832    		configASSERT( ( xTimeIncrement > 0U ) );
;;;833    		configASSERT( uxSchedulerSuspended == 0 );
;;;834    
;;;835    		vTaskSuspendAll();
00000c  f7fffffe          BL       vTaskSuspendAll
;;;836    		{
;;;837    			/* Minor optimisation.  The tick count cannot change in this
;;;838    			block. */
;;;839    			const TickType_t xConstTickCount = xTickCount;
000010  481b              LDR      r0,|L13.128|
000012  6807              LDR      r7,[r0,#0]  ; xTickCount
;;;840    
;;;841    			/* Generate the tick time at which the task wants to wake. */
;;;842    			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
000014  6820              LDR      r0,[r4,#0]
000016  eb000508          ADD      r5,r0,r8
;;;843    
;;;844    			if( xConstTickCount < *pxPreviousWakeTime )
00001a  6820              LDR      r0,[r4,#0]
00001c  42b8              CMP      r0,r7
00001e  d907              BLS      |L13.48|
;;;845    			{
;;;846    				/* The tick count has overflowed since this function was
;;;847    				lasted called.  In this case the only time we should ever
;;;848    				actually delay is if the wake time has also	overflowed,
;;;849    				and the wake time is greater than the tick time.  When this
;;;850    				is the case it is as if neither time had overflowed. */
;;;851    				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
000020  6820              LDR      r0,[r4,#0]
000022  42a8              CMP      r0,r5
000024  d90b              BLS      |L13.62|
000026  42bd              CMP      r5,r7
000028  d909              BLS      |L13.62|
;;;852    				{
;;;853    					xShouldDelay = pdTRUE;
00002a  f04f0901          MOV      r9,#1
00002e  e006              B        |L13.62|
                  |L13.48|
;;;854    				}
;;;855    				else
;;;856    				{
;;;857    					mtCOVERAGE_TEST_MARKER();
;;;858    				}
;;;859    			}
;;;860    			else
;;;861    			{
;;;862    				/* The tick time has not overflowed.  In this case we will
;;;863    				delay if either the wake time has overflowed, and/or the
;;;864    				tick time is less than the wake time. */
;;;865    				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
000030  6820              LDR      r0,[r4,#0]
000032  42a8              CMP      r0,r5
000034  d801              BHI      |L13.58|
000036  42bd              CMP      r5,r7
000038  d901              BLS      |L13.62|
                  |L13.58|
;;;866    				{
;;;867    					xShouldDelay = pdTRUE;
00003a  f04f0901          MOV      r9,#1
                  |L13.62|
;;;868    				}
;;;869    				else
;;;870    				{
;;;871    					mtCOVERAGE_TEST_MARKER();
;;;872    				}
;;;873    			}
;;;874    
;;;875    			/* Update the wake time ready for the next call. */
;;;876    			*pxPreviousWakeTime = xTimeToWake;
00003e  6025              STR      r5,[r4,#0]
;;;877    
;;;878    			if( xShouldDelay != pdFALSE )
000040  f1b90f00          CMP      r9,#0
000044  d013              BEQ      |L13.110|
;;;879    			{
;;;880    				traceTASK_DELAY_UNTIL();
;;;881    
;;;882    				/* Remove the task from the ready list before adding it to the
;;;883    				blocked list as the same list item is used for both lists. */
;;;884    				if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000046  480f              LDR      r0,|L13.132|
000048  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00004a  1d00              ADDS     r0,r0,#4
00004c  f7fffffe          BL       uxListRemove
000050  b950              CBNZ     r0,|L13.104|
;;;885    				{
;;;886    					/* The current task must be in a ready list, so there is
;;;887    					no need to check, and the port reset macro can be called
;;;888    					directly. */
;;;889    					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000052  480c              LDR      r0,|L13.132|
000054  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000056  f890102c          LDRB     r1,[r0,#0x2c]
00005a  2001              MOVS     r0,#1
00005c  4088              LSLS     r0,r0,r1
00005e  490a              LDR      r1,|L13.136|
000060  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000062  4381              BICS     r1,r1,r0
000064  4808              LDR      r0,|L13.136|
000066  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L13.104|
;;;890    				}
;;;891    				else
;;;892    				{
;;;893    					mtCOVERAGE_TEST_MARKER();
;;;894    				}
;;;895    
;;;896    				prvAddCurrentTaskToDelayedList( xTimeToWake );
000068  4628              MOV      r0,r5
00006a  f7fffffe          BL       prvAddCurrentTaskToDelayedList
                  |L13.110|
;;;897    			}
;;;898    			else
;;;899    			{
;;;900    				mtCOVERAGE_TEST_MARKER();
;;;901    			}
;;;902    		}
;;;903    		xAlreadyYielded = xTaskResumeAll();
00006e  f7fffffe          BL       xTaskResumeAll
000072  4606              MOV      r6,r0
;;;904    
;;;905    		/* Force a reschedule if xTaskResumeAll has not already done so, we may
;;;906    		have put ourselves to sleep. */
;;;907    		if( xAlreadyYielded == pdFALSE )
000074  b90e              CBNZ     r6,|L13.122|
;;;908    		{
;;;909    			portYIELD_WITHIN_API();
000076  f7fffffe          BL       vPortYield
                  |L13.122|
;;;910    		}
;;;911    		else
;;;912    		{
;;;913    			mtCOVERAGE_TEST_MARKER();
;;;914    		}
;;;915    	}
00007a  e8bd87f0          POP      {r4-r10,pc}
;;;916    
                          ENDP

00007e  0000              DCW      0x0000
                  |L13.128|
                          DCD      xTickCount
                  |L13.132|
                          DCD      pxCurrentTCB
                  |L13.136|
                          DCD      uxTopReadyPriority

                          AREA ||i.vTaskDelete||, CODE, READONLY, ALIGN=2

                  vTaskDelete PROC
;;;743    
;;;744    	void vTaskDelete( TaskHandle_t xTaskToDelete )
000000  b570              PUSH     {r4-r6,lr}
;;;745    	{
000002  4605              MOV      r5,r0
;;;746    	TCB_t *pxTCB;
;;;747    
;;;748    		taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;749    		{
;;;750    			/* If null is passed in here then it is the calling task that is
;;;751    			being deleted. */
;;;752    			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
000008  b915              CBNZ     r5,|L14.16|
00000a  4820              LDR      r0,|L14.140|
00000c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000e  e000              B        |L14.18|
                  |L14.16|
000010  4628              MOV      r0,r5
                  |L14.18|
000012  4604              MOV      r4,r0
;;;753    
;;;754    			/* Remove task from the ready list and place in the	termination list.
;;;755    			This will stop the task from be scheduled.  The idle task will check
;;;756    			the termination list and free up any memory allocated by the
;;;757    			scheduler for the TCB and stack. */
;;;758    			if( uxListRemove( &( pxTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000014  1d20              ADDS     r0,r4,#4
000016  f7fffffe          BL       uxListRemove
00001a  b978              CBNZ     r0,|L14.60|
;;;759    			{
;;;760    				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
00001c  6ae0              LDR      r0,[r4,#0x2c]
00001e  eb000080          ADD      r0,r0,r0,LSL #2
000022  491b              LDR      r1,|L14.144|
000024  f8510020          LDR      r0,[r1,r0,LSL #2]
000028  b940              CBNZ     r0,|L14.60|
00002a  f894102c          LDRB     r1,[r4,#0x2c]
00002e  2001              MOVS     r0,#1
000030  4088              LSLS     r0,r0,r1
000032  4918              LDR      r1,|L14.148|
000034  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000036  4381              BICS     r1,r1,r0
000038  4816              LDR      r0,|L14.148|
00003a  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L14.60|
;;;761    			}
;;;762    			else
;;;763    			{
;;;764    				mtCOVERAGE_TEST_MARKER();
;;;765    			}
;;;766    
;;;767    			/* Is the task waiting on an event also? */
;;;768    			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
00003c  6aa0              LDR      r0,[r4,#0x28]
00003e  b118              CBZ      r0,|L14.72|
;;;769    			{
;;;770    				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000040  f1040018          ADD      r0,r4,#0x18
000044  f7fffffe          BL       uxListRemove
                  |L14.72|
;;;771    			}
;;;772    			else
;;;773    			{
;;;774    				mtCOVERAGE_TEST_MARKER();
;;;775    			}
;;;776    
;;;777    			vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
000048  1d21              ADDS     r1,r4,#4
00004a  4813              LDR      r0,|L14.152|
00004c  f7fffffe          BL       vListInsertEnd
;;;778    
;;;779    			/* Increment the ucTasksDeleted variable so the idle task knows
;;;780    			there is a task that has been deleted and that it should therefore
;;;781    			check the xTasksWaitingTermination list. */
;;;782    			++uxTasksDeleted;
000050  4812              LDR      r0,|L14.156|
000052  6800              LDR      r0,[r0,#0]  ; uxTasksDeleted
000054  1c40              ADDS     r0,r0,#1
000056  4911              LDR      r1,|L14.156|
000058  6008              STR      r0,[r1,#0]  ; uxTasksDeleted
;;;783    
;;;784    			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
;;;785    			can detect that the task lists need re-generating. */
;;;786    			uxTaskNumber++;
00005a  4811              LDR      r0,|L14.160|
00005c  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
00005e  1c40              ADDS     r0,r0,#1
000060  490f              LDR      r1,|L14.160|
000062  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;787    
;;;788    			traceTASK_DELETE( pxTCB );
;;;789    		}
;;;790    		taskEXIT_CRITICAL();
000064  f7fffffe          BL       vPortExitCritical
;;;791    
;;;792    		/* Force a reschedule if it is the currently running task that has just
;;;793    		been deleted. */
;;;794    		if( xSchedulerRunning != pdFALSE )
000068  480e              LDR      r0,|L14.164|
00006a  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
00006c  b160              CBZ      r0,|L14.136|
;;;795    		{
;;;796    			if( pxTCB == pxCurrentTCB )
00006e  4807              LDR      r0,|L14.140|
000070  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000072  4284              CMP      r4,r0
000074  d102              BNE      |L14.124|
;;;797    			{
;;;798    				configASSERT( uxSchedulerSuspended == 0 );
;;;799    
;;;800    				/* The pre-delete hook is primarily for the Windows simulator,
;;;801    				in which Windows specific clean up operations are performed,
;;;802    				after which it is not possible to yield away from this task -
;;;803    				hence xYieldPending is used to latch that a context switch is
;;;804    				required. */
;;;805    				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
;;;806    				portYIELD_WITHIN_API();
000076  f7fffffe          BL       vPortYield
00007a  e005              B        |L14.136|
                  |L14.124|
;;;807    			}
;;;808    			else
;;;809    			{
;;;810    				/* Reset the next expected unblock time in case it referred to
;;;811    				the task that has just been deleted. */
;;;812    				taskENTER_CRITICAL();
00007c  f7fffffe          BL       vPortEnterCritical
;;;813    				{
;;;814    					prvResetNextTaskUnblockTime();
000080  f7fffffe          BL       prvResetNextTaskUnblockTime
;;;815    				}
;;;816    				taskEXIT_CRITICAL();
000084  f7fffffe          BL       vPortExitCritical
                  |L14.136|
;;;817    			}
;;;818    		}
;;;819    	}
000088  bd70              POP      {r4-r6,pc}
;;;820    
                          ENDP

00008a  0000              DCW      0x0000
                  |L14.140|
                          DCD      pxCurrentTCB
                  |L14.144|
                          DCD      pxReadyTasksLists
                  |L14.148|
                          DCD      uxTopReadyPriority
                  |L14.152|
                          DCD      xTasksWaitingTermination
                  |L14.156|
                          DCD      uxTasksDeleted
                  |L14.160|
                          DCD      uxTaskNumber
                  |L14.164|
                          DCD      xSchedulerRunning

                          AREA ||i.vTaskEndScheduler||, CODE, READONLY, ALIGN=2

                  vTaskEndScheduler PROC
;;;1621   
;;;1622   void vTaskEndScheduler( void )
000000  b510              PUSH     {r4,lr}
;;;1623   {
;;;1624   	/* Stop the scheduler interrupts and call the portable scheduler end
;;;1625   	routine so the original ISRs can be restored if necessary.  The port
;;;1626   	layer must ensure interrupts enable	bit is left in the correct state. */
;;;1627   	portDISABLE_INTERRUPTS();
000002  f7fffffe          BL       ulPortSetInterruptMask
;;;1628   	xSchedulerRunning = pdFALSE;
000006  2000              MOVS     r0,#0
000008  4902              LDR      r1,|L15.20|
00000a  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;1629   	vPortEndScheduler();
00000c  f7fffffe          BL       vPortEndScheduler
;;;1630   }
000010  bd10              POP      {r4,pc}
;;;1631   /*----------------------------------------------------------*/
                          ENDP

000012  0000              DCW      0x0000
                  |L15.20|
                          DCD      xSchedulerRunning

                          AREA ||i.vTaskMissedYield||, CODE, READONLY, ALIGN=2

                  vTaskMissedYield PROC
;;;2634   
;;;2635   void vTaskMissedYield( void )
000000  2001              MOVS     r0,#1
;;;2636   {
;;;2637   	xYieldPending = pdTRUE;
000002  4901              LDR      r1,|L16.8|
000004  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;2638   }
000006  4770              BX       lr
;;;2639   /*-----------------------------------------------------------*/
                          ENDP

                  |L16.8|
                          DCD      xYieldPending

                          AREA ||i.vTaskNotifyGiveFromISR||, CODE, READONLY, ALIGN=2

                  vTaskNotifyGiveFromISR PROC
;;;4361   
;;;4362   	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;4363   	{
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
;;;4364   	TCB_t * pxTCB;
;;;4365   	eNotifyValue eOriginalNotifyState;
;;;4366   	UBaseType_t uxSavedInterruptStatus;
;;;4367   
;;;4368   		configASSERT( xTaskToNotify );
;;;4369   
;;;4370   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4371   		maximum	system call (or maximum API call) interrupt priority.
;;;4372   		Interrupts that are	above the maximum system call priority are keep
;;;4373   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4374   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4375   		is defined in FreeRTOSConfig.h then
;;;4376   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4377   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4378   		been assigned a priority above the configured maximum system call
;;;4379   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4380   		from interrupts	that have been assigned a priority at or (logically)
;;;4381   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4382   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4383   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4384   		provided on the following link:
;;;4385   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4386   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;4387   
;;;4388   		pxTCB = ( TCB_t * ) xTaskToNotify;
000008  462c              MOV      r4,r5
;;;4389   
;;;4390   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
00000a  f7fffffe          BL       ulPortSetInterruptMask
00000e  4680              MOV      r8,r0
;;;4391   		{
;;;4392   			eOriginalNotifyState = pxTCB->eNotifyState;
000010  f8947048          LDRB     r7,[r4,#0x48]
;;;4393   			pxTCB->eNotifyState = eNotified;
000014  2002              MOVS     r0,#2
000016  f8840048          STRB     r0,[r4,#0x48]
;;;4394   
;;;4395   			/* 'Giving' is equivalent to incrementing a count in a counting
;;;4396   			semaphore. */
;;;4397   			( pxTCB->ulNotifiedValue )++;
00001a  6c60              LDR      r0,[r4,#0x44]
00001c  1c40              ADDS     r0,r0,#1
00001e  6460              STR      r0,[r4,#0x44]
;;;4398   
;;;4399   			traceTASK_NOTIFY_GIVE_FROM_ISR();
;;;4400   
;;;4401   			/* If the task is in the blocked state specifically to wait for a
;;;4402   			notification then unblock it now. */
;;;4403   			if( eOriginalNotifyState == eWaitingNotification )
000020  2f01              CMP      r7,#1
000022  d126              BNE      |L17.114|
;;;4404   			{
;;;4405   				/* The task should not have been on an event list. */
;;;4406   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4407   
;;;4408   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000024  4815              LDR      r0,|L17.124|
000026  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000028  b9a8              CBNZ     r0,|L17.86|
;;;4409   				{
;;;4410   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
00002a  1d20              ADDS     r0,r4,#4
00002c  f7fffffe          BL       uxListRemove
;;;4411   					prvAddTaskToReadyList( pxTCB );
000030  f894102c          LDRB     r1,[r4,#0x2c]
000034  2001              MOVS     r0,#1
000036  4088              LSLS     r0,r0,r1
000038  4911              LDR      r1,|L17.128|
00003a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00003c  4308              ORRS     r0,r0,r1
00003e  4910              LDR      r1,|L17.128|
000040  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000042  6ae1              LDR      r1,[r4,#0x2c]
000044  eb010181          ADD      r1,r1,r1,LSL #2
000048  4a0e              LDR      r2,|L17.132|
00004a  eb020081          ADD      r0,r2,r1,LSL #2
00004e  1d21              ADDS     r1,r4,#4
000050  f7fffffe          BL       vListInsertEnd
000054  e004              B        |L17.96|
                  |L17.86|
;;;4412   				}
;;;4413   				else
;;;4414   				{
;;;4415   					/* The delayed and ready lists cannot be accessed, so hold
;;;4416   					this task pending until the scheduler is resumed. */
;;;4417   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
000056  f1040118          ADD      r1,r4,#0x18
00005a  480b              LDR      r0,|L17.136|
00005c  f7fffffe          BL       vListInsertEnd
                  |L17.96|
;;;4418   				}
;;;4419   
;;;4420   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
000060  490a              LDR      r1,|L17.140|
000062  6ae0              LDR      r0,[r4,#0x2c]
000064  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000066  6ac9              LDR      r1,[r1,#0x2c]
000068  4288              CMP      r0,r1
00006a  d902              BLS      |L17.114|
;;;4421   				{
;;;4422   					/* The notified task has a priority above the currently
;;;4423   					executing task so a yield is required. */
;;;4424   					if( pxHigherPriorityTaskWoken != NULL )
00006c  b10e              CBZ      r6,|L17.114|
;;;4425   					{
;;;4426   						*pxHigherPriorityTaskWoken = pdTRUE;
00006e  2001              MOVS     r0,#1
000070  6030              STR      r0,[r6,#0]
                  |L17.114|
;;;4427   					}
;;;4428   				}
;;;4429   				else
;;;4430   				{
;;;4431   					mtCOVERAGE_TEST_MARKER();
;;;4432   				}
;;;4433   			}
;;;4434   		}
;;;4435   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
000072  4640              MOV      r0,r8
000074  f7fffffe          BL       vPortClearInterruptMask
;;;4436   	}
000078  e8bd81f0          POP      {r4-r8,pc}
;;;4437   
                          ENDP

                  |L17.124|
                          DCD      uxSchedulerSuspended
                  |L17.128|
                          DCD      uxTopReadyPriority
                  |L17.132|
                          DCD      pxReadyTasksLists
                  |L17.136|
                          DCD      xPendingReadyList
                  |L17.140|
                          DCD      pxCurrentTCB

                          AREA ||i.vTaskPlaceOnEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnEventList PROC
;;;2261   
;;;2262   void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2263   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2264   TickType_t xTimeToWake;
;;;2265   
;;;2266   	configASSERT( pxEventList );
;;;2267   
;;;2268   	/* THIS FUNCTION MUST BE CALLED WITH EITHER INTERRUPTS DISABLED OR THE
;;;2269   	SCHEDULER SUSPENDED AND THE QUEUE BEING ACCESSED LOCKED. */
;;;2270   
;;;2271   	/* Place the event list item of the TCB in the appropriate event list.
;;;2272   	This is placed in the list in priority order so the highest priority task
;;;2273   	is the first to be woken by the event.  The queue that contains the event
;;;2274   	list is locked, preventing simultaneous access from interrupts. */
;;;2275   	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000006  480f              LDR      r0,|L18.68|
000008  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
00000a  3118              ADDS     r1,r1,#0x18
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       vListInsert
;;;2276   
;;;2277   	/* The task must be removed from from the ready list before it is added to
;;;2278   	the blocked list as the same list item is used for both lists.  Exclusive
;;;2279   	access to the ready lists guaranteed because the scheduler is locked. */
;;;2280   	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000012  480c              LDR      r0,|L18.68|
000014  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000016  1d00              ADDS     r0,r0,#4
000018  f7fffffe          BL       uxListRemove
00001c  b950              CBNZ     r0,|L18.52|
;;;2281   	{
;;;2282   		/* The current task must be in a ready list, so there is no need to
;;;2283   		check, and the port reset macro can be called directly. */
;;;2284   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00001e  4809              LDR      r0,|L18.68|
000020  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000022  f890102c          LDRB     r1,[r0,#0x2c]
000026  2001              MOVS     r0,#1
000028  4088              LSLS     r0,r0,r1
00002a  4907              LDR      r1,|L18.72|
00002c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00002e  4381              BICS     r1,r1,r0
000030  4805              LDR      r0,|L18.72|
000032  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L18.52|
;;;2285   	}
;;;2286   	else
;;;2287   	{
;;;2288   		mtCOVERAGE_TEST_MARKER();
;;;2289   	}
;;;2290   
;;;2291   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;2292   	{
;;;2293   		if( xTicksToWait == portMAX_DELAY )
;;;2294   		{
;;;2295   			/* Add the task to the suspended task list instead of a delayed task
;;;2296   			list to ensure the task is not woken by a timing event.  It will
;;;2297   			block indefinitely. */
;;;2298   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;2299   		}
;;;2300   		else
;;;2301   		{
;;;2302   			/* Calculate the time at which the task should be woken if the event
;;;2303   			does not occur.  This may overflow but this doesn't matter, the
;;;2304   			scheduler will handle it. */
;;;2305   			xTimeToWake = xTickCount + xTicksToWait;
;;;2306   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2307   		}
;;;2308   	}
;;;2309   	#else /* INCLUDE_vTaskSuspend */
;;;2310   	{
;;;2311   			/* Calculate the time at which the task should be woken if the event does
;;;2312   			not occur.  This may overflow but this doesn't matter, the scheduler
;;;2313   			will handle it. */
;;;2314   			xTimeToWake = xTickCount + xTicksToWait;
000034  4805              LDR      r0,|L18.76|
000036  6800              LDR      r0,[r0,#0]  ; xTickCount
000038  1905              ADDS     r5,r0,r4
;;;2315   			prvAddCurrentTaskToDelayedList( xTimeToWake );
00003a  4628              MOV      r0,r5
00003c  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;2316   	}
;;;2317   	#endif /* INCLUDE_vTaskSuspend */
;;;2318   }
000040  bd70              POP      {r4-r6,pc}
;;;2319   /*-----------------------------------------------------------*/
                          ENDP

000042  0000              DCW      0x0000
                  |L18.68|
                          DCD      pxCurrentTCB
                  |L18.72|
                          DCD      uxTopReadyPriority
                  |L18.76|
                          DCD      xTickCount

                          AREA ||i.vTaskPlaceOnUnorderedEventList||, CODE, READONLY, ALIGN=2

                  vTaskPlaceOnUnorderedEventList PROC
;;;2320   
;;;2321   void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2322   {
000004  4607              MOV      r7,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;2323   TickType_t xTimeToWake;
;;;2324   
;;;2325   	configASSERT( pxEventList );
;;;2326   
;;;2327   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2328   	the event groups implementation. */
;;;2329   	configASSERT( uxSchedulerSuspended != 0 );
;;;2330   
;;;2331   	/* Store the item value in the event list item.  It is safe to access the
;;;2332   	event list item here as interrupts won't access the event list item of a
;;;2333   	task that is not in the Blocked state. */
;;;2334   	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
00000a  f0444000          ORR      r0,r4,#0x80000000
00000e  4911              LDR      r1,|L19.84|
000010  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000012  6188              STR      r0,[r1,#0x18]
;;;2335   
;;;2336   	/* Place the event list item of the TCB at the end of the appropriate event
;;;2337   	list.  It is safe to access the event list here because it is part of an
;;;2338   	event group implementation - and interrupts don't access event groups
;;;2339   	directly (instead they access them indirectly by pending function calls to
;;;2340   	the task level). */
;;;2341   	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
000014  480f              LDR      r0,|L19.84|
000016  6801              LDR      r1,[r0,#0]  ; pxCurrentTCB
000018  3118              ADDS     r1,r1,#0x18
00001a  4638              MOV      r0,r7
00001c  f7fffffe          BL       vListInsertEnd
;;;2342   
;;;2343   	/* The task must be removed from the ready list before it is added to the
;;;2344   	blocked list.  Exclusive access can be assured to the ready list as the
;;;2345   	scheduler is locked. */
;;;2346   	if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000020  480c              LDR      r0,|L19.84|
000022  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000024  1d00              ADDS     r0,r0,#4
000026  f7fffffe          BL       uxListRemove
00002a  b950              CBNZ     r0,|L19.66|
;;;2347   	{
;;;2348   		/* The current task must be in a ready list, so there is no need to
;;;2349   		check, and the port reset macro can be called directly. */
;;;2350   		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
00002c  4809              LDR      r0,|L19.84|
00002e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000030  f890102c          LDRB     r1,[r0,#0x2c]
000034  2001              MOVS     r0,#1
000036  4088              LSLS     r0,r0,r1
000038  4907              LDR      r1,|L19.88|
00003a  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00003c  4381              BICS     r1,r1,r0
00003e  4806              LDR      r0,|L19.88|
000040  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L19.66|
;;;2351   	}
;;;2352   	else
;;;2353   	{
;;;2354   		mtCOVERAGE_TEST_MARKER();
;;;2355   	}
;;;2356   
;;;2357   	#if ( INCLUDE_vTaskSuspend == 1 )
;;;2358   	{
;;;2359   		if( xTicksToWait == portMAX_DELAY )
;;;2360   		{
;;;2361   			/* Add the task to the suspended task list instead of a delayed task
;;;2362   			list to ensure it is not woken by a timing event.  It will block
;;;2363   			indefinitely. */
;;;2364   			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;2365   		}
;;;2366   		else
;;;2367   		{
;;;2368   			/* Calculate the time at which the task should be woken if the event
;;;2369   			does not occur.  This may overflow but this doesn't matter, the
;;;2370   			kernel will manage it correctly. */
;;;2371   			xTimeToWake = xTickCount + xTicksToWait;
;;;2372   			prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;2373   		}
;;;2374   	}
;;;2375   	#else /* INCLUDE_vTaskSuspend */
;;;2376   	{
;;;2377   			/* Calculate the time at which the task should be woken if the event does
;;;2378   			not occur.  This may overflow but this doesn't matter, the kernel
;;;2379   			will manage it correctly. */
;;;2380   			xTimeToWake = xTickCount + xTicksToWait;
000042  4806              LDR      r0,|L19.92|
000044  6800              LDR      r0,[r0,#0]  ; xTickCount
000046  1946              ADDS     r6,r0,r5
;;;2381   			prvAddCurrentTaskToDelayedList( xTimeToWake );
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;2382   	}
;;;2383   	#endif /* INCLUDE_vTaskSuspend */
;;;2384   }
00004e  e8bd81f0          POP      {r4-r8,pc}
;;;2385   /*-----------------------------------------------------------*/
                          ENDP

000052  0000              DCW      0x0000
                  |L19.84|
                          DCD      pxCurrentTCB
                  |L19.88|
                          DCD      uxTopReadyPriority
                  |L19.92|
                          DCD      xTickCount

                          AREA ||i.vTaskSetTimeOutState||, CODE, READONLY, ALIGN=2

                  vTaskSetTimeOutState PROC
;;;2577   
;;;2578   void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
000000  4903              LDR      r1,|L20.16|
;;;2579   {
;;;2580   	configASSERT( pxTimeOut );
;;;2581   	pxTimeOut->xOverflowCount = xNumOfOverflows;
000002  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000004  6001              STR      r1,[r0,#0]
;;;2582   	pxTimeOut->xTimeOnEntering = xTickCount;
000006  4903              LDR      r1,|L20.20|
000008  6809              LDR      r1,[r1,#0]  ; xTickCount
00000a  6041              STR      r1,[r0,#4]
;;;2583   }
00000c  4770              BX       lr
;;;2584   /*-----------------------------------------------------------*/
                          ENDP

00000e  0000              DCW      0x0000
                  |L20.16|
                          DCD      xNumOfOverflows
                  |L20.20|
                          DCD      xTickCount

                          AREA ||i.vTaskStartScheduler||, CODE, READONLY, ALIGN=2

                  vTaskStartScheduler PROC
;;;1542   
;;;1543   void vTaskStartScheduler( void )
000000  b51f              PUSH     {r0-r4,lr}
;;;1544   {
;;;1545   BaseType_t xReturn;
;;;1546   
;;;1547   	/* Add the idle task at the lowest priority. */
;;;1548   	#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )
;;;1549   	{
;;;1550   		/* Create the idle task, storing its handle in xIdleTaskHandle so it can
;;;1551   		be returned by the xTaskGetIdleTaskHandle() function. */
;;;1552   		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
;;;1553   	}
;;;1554   	#else
;;;1555   	{
;;;1556   		/* Create the idle task without storing its handle. */
;;;1557   		xReturn = xTaskCreate( prvIdleTask, "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );  /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */
000002  2000              MOVS     r0,#0
000004  9000              STR      r0,[sp,#0]
000006  9001              STR      r0,[sp,#4]
000008  9002              STR      r0,[sp,#8]
00000a  4603              MOV      r3,r0
00000c  2280              MOVS     r2,#0x80
00000e  a10b              ADR      r1,|L21.60|
000010  9003              STR      r0,[sp,#0xc]
000012  480c              LDR      r0,|L21.68|
000014  f7fffffe          BL       xTaskGenericCreate
000018  4604              MOV      r4,r0
;;;1558   	}
;;;1559   	#endif /* INCLUDE_xTaskGetIdleTaskHandle */
;;;1560   
;;;1561   	#if ( configUSE_TIMERS == 1 )
;;;1562   	{
;;;1563   		if( xReturn == pdPASS )
;;;1564   		{
;;;1565   			xReturn = xTimerCreateTimerTask();
;;;1566   		}
;;;1567   		else
;;;1568   		{
;;;1569   			mtCOVERAGE_TEST_MARKER();
;;;1570   		}
;;;1571   	}
;;;1572   	#endif /* configUSE_TIMERS */
;;;1573   
;;;1574   	if( xReturn == pdPASS )
00001a  2c01              CMP      r4,#1
00001c  d10c              BNE      |L21.56|
;;;1575   	{
;;;1576   		/* Interrupts are turned off here, to ensure a tick does not occur
;;;1577   		before or during the call to xPortStartScheduler().  The stacks of
;;;1578   		the created tasks contain a status word with interrupts switched on
;;;1579   		so interrupts will automatically get re-enabled when the first task
;;;1580   		starts to run. */
;;;1581   		portDISABLE_INTERRUPTS();
00001e  f7fffffe          BL       ulPortSetInterruptMask
;;;1582   
;;;1583   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;1584   		{
;;;1585   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;1586   			structure specific to the task that will run first. */
;;;1587   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;1588   		}
;;;1589   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;1590   
;;;1591   		xNextTaskUnblockTime = portMAX_DELAY;
000022  1ea0              SUBS     r0,r4,#2
000024  4908              LDR      r1,|L21.72|
000026  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;1592   		xSchedulerRunning = pdTRUE;
000028  2001              MOVS     r0,#1
00002a  4908              LDR      r1,|L21.76|
00002c  6008              STR      r0,[r1,#0]  ; xSchedulerRunning
;;;1593   		xTickCount = ( TickType_t ) 0U;
00002e  2000              MOVS     r0,#0
000030  4907              LDR      r1,|L21.80|
000032  6008              STR      r0,[r1,#0]  ; xTickCount
;;;1594   
;;;1595   		/* If configGENERATE_RUN_TIME_STATS is defined then the following
;;;1596   		macro must be defined to configure the timer/counter used to generate
;;;1597   		the run time counter time base. */
;;;1598   		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
;;;1599   
;;;1600   		/* Setting up the timer tick is hardware specific and thus in the
;;;1601   		portable interface. */
;;;1602   		if( xPortStartScheduler() != pdFALSE )
000034  f7fffffe          BL       xPortStartScheduler
                  |L21.56|
;;;1603   		{
;;;1604   			/* Should not reach here as if the scheduler is running the
;;;1605   			function will not return. */
;;;1606   		}
;;;1607   		else
;;;1608   		{
;;;1609   			/* Should only reach here if a task calls xTaskEndScheduler(). */
;;;1610   		}
;;;1611   	}
;;;1612   	else
;;;1613   	{
;;;1614   		/* This line will only be reached if the kernel could not be started,
;;;1615   		because there was not enough FreeRTOS heap to create the idle task
;;;1616   		or the timer task. */
;;;1617   		configASSERT( xReturn );
;;;1618   	}
;;;1619   }
000038  bd1f              POP      {r0-r4,pc}
;;;1620   /*-----------------------------------------------------------*/
                          ENDP

00003a  0000              DCW      0x0000
                  |L21.60|
00003c  49444c45          DCB      "IDLE",0
000040  00      
000041  00                DCB      0
000042  00                DCB      0
000043  00                DCB      0
                  |L21.68|
                          DCD      prvIdleTask
                  |L21.72|
                          DCD      xNextTaskUnblockTime
                  |L21.76|
                          DCD      xSchedulerRunning
                  |L21.80|
                          DCD      xTickCount

                          AREA ||i.vTaskSuspendAll||, CODE, READONLY, ALIGN=2

                  vTaskSuspendAll PROC
;;;1632   
;;;1633   void vTaskSuspendAll( void )
000000  4802              LDR      r0,|L22.12|
;;;1634   {
;;;1635   	/* A critical section is not required as the variable is of type
;;;1636   	BaseType_t.  Please read Richard Barry's reply in the following link to a
;;;1637   	post in the FreeRTOS support forum before reporting this as a bug! -
;;;1638   	http://goo.gl/wu4acr */
;;;1639   	++uxSchedulerSuspended;
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L22.12|
000008  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;1640   }
00000a  4770              BX       lr
;;;1641   /*----------------------------------------------------------*/
                          ENDP

                  |L22.12|
                          DCD      uxSchedulerSuspended

                          AREA ||i.vTaskSwitchContext||, CODE, READONLY, ALIGN=2

                  vTaskSwitchContext PROC
;;;2202   
;;;2203   void vTaskSwitchContext( void )
000000  4812              LDR      r0,|L23.76|
;;;2204   {
;;;2205   	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
000002  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000004  b118              CBZ      r0,|L23.14|
;;;2206   	{
;;;2207   		/* The scheduler is currently suspended - do not allow a context
;;;2208   		switch. */
;;;2209   		xYieldPending = pdTRUE;
000006  2001              MOVS     r0,#1
000008  4911              LDR      r1,|L23.80|
00000a  6008              STR      r0,[r1,#0]  ; xYieldPending
00000c  e01d              B        |L23.74|
                  |L23.14|
;;;2210   	}
;;;2211   	else
;;;2212   	{
;;;2213   		xYieldPending = pdFALSE;
00000e  2000              MOVS     r0,#0
000010  490f              LDR      r1,|L23.80|
000012  6008              STR      r0,[r1,#0]  ; xYieldPending
;;;2214   		traceTASK_SWITCHED_OUT();
;;;2215   
;;;2216   		#if ( configGENERATE_RUN_TIME_STATS == 1 )
;;;2217   		{
;;;2218   				#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
;;;2219   					portALT_GET_RUN_TIME_COUNTER_VALUE( ulTotalRunTime );
;;;2220   				#else
;;;2221   					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
;;;2222   				#endif
;;;2223   
;;;2224   				/* Add the amount of time the task has been running to the
;;;2225   				accumulated	time so far.  The time the task started running was
;;;2226   				stored in ulTaskSwitchedInTime.  Note that there is no overflow
;;;2227   				protection here	so count values are only valid until the timer
;;;2228   				overflows.  The guard against negative values is to protect
;;;2229   				against suspect run time stat counter implementations - which
;;;2230   				are provided by the application, not the kernel. */
;;;2231   				if( ulTotalRunTime > ulTaskSwitchedInTime )
;;;2232   				{
;;;2233   					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
;;;2234   				}
;;;2235   				else
;;;2236   				{
;;;2237   					mtCOVERAGE_TEST_MARKER();
;;;2238   				}
;;;2239   				ulTaskSwitchedInTime = ulTotalRunTime;
;;;2240   		}
;;;2241   		#endif /* configGENERATE_RUN_TIME_STATS */
;;;2242   
;;;2243   		/* Check for stack overflow, if configured. */
;;;2244   		taskCHECK_FOR_STACK_OVERFLOW();
;;;2245   
;;;2246   		/* Select a new task to run using either the generic C or port
;;;2247   		optimised asm code. */
;;;2248   		taskSELECT_HIGHEST_PRIORITY_TASK();
000014  480f              LDR      r0,|L23.84|
000016  6800              LDR      r0,[r0,#0]  ; uxTopReadyPriority
000018  fab0f080          CLZ      r0,r0
00001c  f1c0011f          RSB      r1,r0,#0x1f
000020  eb010281          ADD      r2,r1,r1,LSL #2
000024  4b0c              LDR      r3,|L23.88|
000026  eb030082          ADD      r0,r3,r2,LSL #2
00002a  6842              LDR      r2,[r0,#4]
00002c  6852              LDR      r2,[r2,#4]
00002e  6042              STR      r2,[r0,#4]
000030  f1000208          ADD      r2,r0,#8
000034  6843              LDR      r3,[r0,#4]
000036  4293              CMP      r3,r2
000038  d102              BNE      |L23.64|
00003a  6842              LDR      r2,[r0,#4]
00003c  6852              LDR      r2,[r2,#4]
00003e  6042              STR      r2,[r0,#4]
                  |L23.64|
000040  6842              LDR      r2,[r0,#4]
000042  68d2              LDR      r2,[r2,#0xc]
000044  4b05              LDR      r3,|L23.92|
000046  601a              STR      r2,[r3,#0]  ; pxCurrentTCB
000048  bf00              NOP      
                  |L23.74|
;;;2249   		traceTASK_SWITCHED_IN();
;;;2250   
;;;2251   		#if ( configUSE_NEWLIB_REENTRANT == 1 )
;;;2252   		{
;;;2253   			/* Switch Newlib's _impure_ptr variable to point to the _reent
;;;2254   			structure specific to this task. */
;;;2255   			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
;;;2256   		}
;;;2257   		#endif /* configUSE_NEWLIB_REENTRANT */
;;;2258   	}
;;;2259   }
00004a  4770              BX       lr
;;;2260   /*-----------------------------------------------------------*/
                          ENDP

                  |L23.76|
                          DCD      uxSchedulerSuspended
                  |L23.80|
                          DCD      xYieldPending
                  |L23.84|
                          DCD      uxTopReadyPriority
                  |L23.88|
                          DCD      pxReadyTasksLists
                  |L23.92|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskCheckForTimeOut||, CODE, READONLY, ALIGN=2

                  xTaskCheckForTimeOut PROC
;;;2585   
;;;2586   BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
000000  b570              PUSH     {r4-r6,lr}
;;;2587   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2588   BaseType_t xReturn;
;;;2589   
;;;2590   	configASSERT( pxTimeOut );
;;;2591   	configASSERT( pxTicksToWait );
;;;2592   
;;;2593   	taskENTER_CRITICAL();
000006  f7fffffe          BL       vPortEnterCritical
;;;2594   	{
;;;2595   		/* Minor optimisation.  The tick count cannot change in this block. */
;;;2596   		const TickType_t xConstTickCount = xTickCount;
00000a  4810              LDR      r0,|L24.76|
00000c  6802              LDR      r2,[r0,#0]  ; xTickCount
;;;2597   
;;;2598   		#if ( INCLUDE_vTaskSuspend == 1 )
;;;2599   			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
;;;2600   			the maximum block time then the task should block indefinitely, and
;;;2601   			therefore never time out. */
;;;2602   			if( *pxTicksToWait == portMAX_DELAY )
;;;2603   			{
;;;2604   				xReturn = pdFALSE;
;;;2605   			}
;;;2606   			else /* We are not blocking indefinitely, perform the checks below. */
;;;2607   		#endif
;;;2608   
;;;2609   		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
00000e  4910              LDR      r1,|L24.80|
000010  6820              LDR      r0,[r4,#0]
000012  6809              LDR      r1,[r1,#0]  ; xNumOfOverflows
000014  4288              CMP      r0,r1
000016  d004              BEQ      |L24.34|
000018  6860              LDR      r0,[r4,#4]
00001a  4290              CMP      r0,r2
00001c  d801              BHI      |L24.34|
;;;2610   		{
;;;2611   			/* The tick count is greater than the time at which vTaskSetTimeout()
;;;2612   			was called, but has also overflowed since vTaskSetTimeOut() was called.
;;;2613   			It must have wrapped all the way around and gone past us again. This
;;;2614   			passed since vTaskSetTimeout() was called. */
;;;2615   			xReturn = pdTRUE;
00001e  2601              MOVS     r6,#1
000020  e00f              B        |L24.66|
                  |L24.34|
;;;2616   		}
;;;2617   		else if( ( xConstTickCount - pxTimeOut->xTimeOnEntering ) < *pxTicksToWait )
000022  6860              LDR      r0,[r4,#4]
000024  1a10              SUBS     r0,r2,r0
000026  6829              LDR      r1,[r5,#0]
000028  4288              CMP      r0,r1
00002a  d209              BCS      |L24.64|
;;;2618   		{
;;;2619   			/* Not a genuine timeout. Adjust parameters for time remaining. */
;;;2620   			*pxTicksToWait -= ( xConstTickCount -  pxTimeOut->xTimeOnEntering );
00002c  6828              LDR      r0,[r5,#0]
00002e  6861              LDR      r1,[r4,#4]
000030  1a51              SUBS     r1,r2,r1
000032  1a40              SUBS     r0,r0,r1
000034  6028              STR      r0,[r5,#0]
;;;2621   			vTaskSetTimeOutState( pxTimeOut );
000036  4620              MOV      r0,r4
000038  f7fffffe          BL       vTaskSetTimeOutState
;;;2622   			xReturn = pdFALSE;
00003c  2600              MOVS     r6,#0
00003e  e000              B        |L24.66|
                  |L24.64|
;;;2623   		}
;;;2624   		else
;;;2625   		{
;;;2626   			xReturn = pdTRUE;
000040  2601              MOVS     r6,#1
                  |L24.66|
;;;2627   		}
;;;2628   	}
;;;2629   	taskEXIT_CRITICAL();
000042  f7fffffe          BL       vPortExitCritical
;;;2630   
;;;2631   	return xReturn;
000046  4630              MOV      r0,r6
;;;2632   }
000048  bd70              POP      {r4-r6,pc}
;;;2633   /*-----------------------------------------------------------*/
                          ENDP

00004a  0000              DCW      0x0000
                  |L24.76|
                          DCD      xTickCount
                  |L24.80|
                          DCD      xNumOfOverflows

                          AREA ||i.xTaskGenericCreate||, CODE, READONLY, ALIGN=2

                  xTaskGenericCreate PROC
;;;550    
;;;551    BaseType_t xTaskGenericCreate( TaskFunction_t pxTaskCode, const char * const pcName, const uint16_t usStackDepth, void * const pvParameters, UBaseType_t uxPriority, TaskHandle_t * const pxCreatedTask, StackType_t * const puxStackBuffer, const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;552    {
000004  b081              SUB      sp,sp,#4
000006  4680              MOV      r8,r0
000008  4615              MOV      r5,r2
00000a  4699              MOV      r9,r3
00000c  e9dd7a0e          LDRD     r7,r10,[sp,#0x38]
;;;553    BaseType_t xReturn;
;;;554    TCB_t * pxNewTCB;
;;;555    StackType_t *pxTopOfStack;
;;;556    
;;;557    	configASSERT( pxTaskCode );
;;;558    	configASSERT( ( ( uxPriority & ( UBaseType_t ) ( ~portPRIVILEGE_BIT ) ) < ( UBaseType_t ) configMAX_PRIORITIES ) );
;;;559    
;;;560    	/* Allocate the memory required by the TCB and stack for the new task,
;;;561    	checking that the allocation was successful. */
;;;562    	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
000010  4628              MOV      r0,r5
000012  9910              LDR      r1,[sp,#0x40]
000014  f7fffffe          BL       prvAllocateTCBAndStack
000018  4604              MOV      r4,r0
;;;563    
;;;564    	if( pxNewTCB != NULL )
00001a  2c00              CMP      r4,#0
00001c  d04f              BEQ      |L25.190|
;;;565    	{
;;;566    		#if( portUSING_MPU_WRAPPERS == 1 )
;;;567    			/* Should the task be created in privileged mode? */
;;;568    			BaseType_t xRunPrivileged;
;;;569    			if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
;;;570    			{
;;;571    				xRunPrivileged = pdTRUE;
;;;572    			}
;;;573    			else
;;;574    			{
;;;575    				xRunPrivileged = pdFALSE;
;;;576    			}
;;;577    			uxPriority &= ~portPRIVILEGE_BIT;
;;;578    
;;;579    			if( puxStackBuffer != NULL )
;;;580    			{
;;;581    				/* The application provided its own stack.  Note this so no
;;;582    				attempt is made to delete the stack should that task be
;;;583    				deleted. */
;;;584    				pxNewTCB->xUsingStaticallyAllocatedStack = pdTRUE;
;;;585    			}
;;;586    			else
;;;587    			{
;;;588    				/* The stack was allocated dynamically.  Note this so it can be
;;;589    				deleted again if the task is deleted. */
;;;590    				pxNewTCB->xUsingStaticallyAllocatedStack = pdFALSE;
;;;591    			}
;;;592    		#endif /* portUSING_MPU_WRAPPERS == 1 */
;;;593    
;;;594    		/* Calculate the top of stack address.  This depends on whether the
;;;595    		stack grows from high memory to low (as per the 80x86) or vice versa.
;;;596    		portSTACK_GROWTH is used to make the result positive or negative as
;;;597    		required by the port. */
;;;598    		#if( portSTACK_GROWTH < 0 )
;;;599    		{
;;;600    			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( uint16_t ) 1 );
00001e  1e68              SUBS     r0,r5,#1
000020  6b21              LDR      r1,[r4,#0x30]
000022  eb010b80          ADD      r11,r1,r0,LSL #2
;;;601    			pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
000026  f02b0b07          BIC      r11,r11,#7
;;;602    
;;;603    			/* Check the alignment of the calculated top of stack is correct. */
;;;604    			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;605    		}
;;;606    		#else /* portSTACK_GROWTH */
;;;607    		{
;;;608    			pxTopOfStack = pxNewTCB->pxStack;
;;;609    
;;;610    			/* Check the alignment of the stack buffer is correct. */
;;;611    			configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxNewTCB->pxStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
;;;612    
;;;613    			/* If we want to use stack checking on architectures that use
;;;614    			a positive stack growth direction then we also need to store the
;;;615    			other extreme of the stack space. */
;;;616    			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
;;;617    		}
;;;618    		#endif /* portSTACK_GROWTH */
;;;619    
;;;620    		/* Setup the newly allocated TCB with the initial state of the task. */
;;;621    		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
00002a  9500              STR      r5,[sp,#0]
00002c  463a              MOV      r2,r7
00002e  4620              MOV      r0,r4
000030  9b11              LDR      r3,[sp,#0x44]
000032  9902              LDR      r1,[sp,#8]
000034  f7fffffe          BL       prvInitialiseTCBVariables
;;;622    
;;;623    		/* Initialize the TCB stack to look as if the task was already running,
;;;624    		but had been interrupted by the scheduler.  The return address is set
;;;625    		to the start of the task function. Once the stack has been initialised
;;;626    		the	top of stack variable is updated. */
;;;627    		#if( portUSING_MPU_WRAPPERS == 1 )
;;;628    		{
;;;629    			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
;;;630    		}
;;;631    		#else /* portUSING_MPU_WRAPPERS */
;;;632    		{
;;;633    			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
000038  464a              MOV      r2,r9
00003a  4641              MOV      r1,r8
00003c  4658              MOV      r0,r11
00003e  f7fffffe          BL       pxPortInitialiseStack
000042  6020              STR      r0,[r4,#0]
;;;634    		}
;;;635    		#endif /* portUSING_MPU_WRAPPERS */
;;;636    
;;;637    		if( ( void * ) pxCreatedTask != NULL )
000044  f1ba0f00          CMP      r10,#0
000048  d001              BEQ      |L25.78|
;;;638    		{
;;;639    			/* Pass the TCB out - in an anonymous way.  The calling function/
;;;640    			task can use this as a handle to delete the task later if
;;;641    			required.*/
;;;642    			*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
00004a  f8ca4000          STR      r4,[r10,#0]
                  |L25.78|
;;;643    		}
;;;644    		else
;;;645    		{
;;;646    			mtCOVERAGE_TEST_MARKER();
;;;647    		}
;;;648    
;;;649    		/* Ensure interrupts don't access the task lists while they are being
;;;650    		updated. */
;;;651    		taskENTER_CRITICAL();
00004e  f7fffffe          BL       vPortEnterCritical
;;;652    		{
;;;653    			uxCurrentNumberOfTasks++;
000052  4824              LDR      r0,|L25.228|
000054  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
000056  1c40              ADDS     r0,r0,#1
000058  4922              LDR      r1,|L25.228|
00005a  6008              STR      r0,[r1,#0]  ; uxCurrentNumberOfTasks
;;;654    			if( pxCurrentTCB == NULL )
00005c  4822              LDR      r0,|L25.232|
00005e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000060  b940              CBNZ     r0,|L25.116|
;;;655    			{
;;;656    				/* There are no other tasks, or all the other tasks are in
;;;657    				the suspended state - make this the current task. */
;;;658    				pxCurrentTCB =  pxNewTCB;
000062  4821              LDR      r0,|L25.232|
000064  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
;;;659    
;;;660    				if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
000066  4608              MOV      r0,r1
000068  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00006a  2801              CMP      r0,#1
00006c  d10c              BNE      |L25.136|
;;;661    				{
;;;662    					/* This is the first task to be created so do the preliminary
;;;663    					initialisation required.  We will not recover if this call
;;;664    					fails, but we will report the failure. */
;;;665    					prvInitialiseTaskLists();
00006e  f7fffffe          BL       prvInitialiseTaskLists
000072  e009              B        |L25.136|
                  |L25.116|
;;;666    				}
;;;667    				else
;;;668    				{
;;;669    					mtCOVERAGE_TEST_MARKER();
;;;670    				}
;;;671    			}
;;;672    			else
;;;673    			{
;;;674    				/* If the scheduler is not already running, make this task the
;;;675    				current task if it is the highest priority task to be created
;;;676    				so far. */
;;;677    				if( xSchedulerRunning == pdFALSE )
000074  481d              LDR      r0,|L25.236|
000076  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
000078  b930              CBNZ     r0,|L25.136|
;;;678    				{
;;;679    					if( pxCurrentTCB->uxPriority <= uxPriority )
00007a  481b              LDR      r0,|L25.232|
00007c  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00007e  6ac0              LDR      r0,[r0,#0x2c]
000080  42b8              CMP      r0,r7
000082  d801              BHI      |L25.136|
;;;680    					{
;;;681    						pxCurrentTCB = pxNewTCB;
000084  4818              LDR      r0,|L25.232|
000086  6004              STR      r4,[r0,#0]  ; pxCurrentTCB
                  |L25.136|
;;;682    					}
;;;683    					else
;;;684    					{
;;;685    						mtCOVERAGE_TEST_MARKER();
;;;686    					}
;;;687    				}
;;;688    				else
;;;689    				{
;;;690    					mtCOVERAGE_TEST_MARKER();
;;;691    				}
;;;692    			}
;;;693    
;;;694    			uxTaskNumber++;
000088  4819              LDR      r0,|L25.240|
00008a  6800              LDR      r0,[r0,#0]  ; uxTaskNumber
00008c  1c40              ADDS     r0,r0,#1
00008e  4918              LDR      r1,|L25.240|
000090  6008              STR      r0,[r1,#0]  ; uxTaskNumber
;;;695    
;;;696    			#if ( configUSE_TRACE_FACILITY == 1 )
;;;697    			{
;;;698    				/* Add a counter into the TCB for tracing only. */
;;;699    				pxNewTCB->uxTCBNumber = uxTaskNumber;
;;;700    			}
;;;701    			#endif /* configUSE_TRACE_FACILITY */
;;;702    			traceTASK_CREATE( pxNewTCB );
;;;703    
;;;704    			prvAddTaskToReadyList( pxNewTCB );
000092  f894102c          LDRB     r1,[r4,#0x2c]
000096  2001              MOVS     r0,#1
000098  4088              LSLS     r0,r0,r1
00009a  4916              LDR      r1,|L25.244|
00009c  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
00009e  4308              ORRS     r0,r0,r1
0000a0  4914              LDR      r1,|L25.244|
0000a2  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
0000a4  6ae1              LDR      r1,[r4,#0x2c]
0000a6  eb010181          ADD      r1,r1,r1,LSL #2
0000aa  4a13              LDR      r2,|L25.248|
0000ac  eb020081          ADD      r0,r2,r1,LSL #2
0000b0  1d21              ADDS     r1,r4,#4
0000b2  f7fffffe          BL       vListInsertEnd
;;;705    
;;;706    			xReturn = pdPASS;
0000b6  2601              MOVS     r6,#1
;;;707    			portSETUP_TCB( pxNewTCB );
;;;708    		}
;;;709    		taskEXIT_CRITICAL();
0000b8  f7fffffe          BL       vPortExitCritical
0000bc  e001              B        |L25.194|
                  |L25.190|
;;;710    	}
;;;711    	else
;;;712    	{
;;;713    		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
0000be  f04f36ff          MOV      r6,#0xffffffff
                  |L25.194|
;;;714    		traceTASK_CREATE_FAILED();
;;;715    	}
;;;716    
;;;717    	if( xReturn == pdPASS )
0000c2  2e01              CMP      r6,#1
0000c4  d109              BNE      |L25.218|
;;;718    	{
;;;719    		if( xSchedulerRunning != pdFALSE )
0000c6  4809              LDR      r0,|L25.236|
0000c8  6800              LDR      r0,[r0,#0]  ; xSchedulerRunning
0000ca  b130              CBZ      r0,|L25.218|
;;;720    		{
;;;721    			/* If the created task is of a higher priority than the current task
;;;722    			then it should run now. */
;;;723    			if( pxCurrentTCB->uxPriority < uxPriority )
0000cc  4806              LDR      r0,|L25.232|
0000ce  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000d0  6ac0              LDR      r0,[r0,#0x2c]
0000d2  42b8              CMP      r0,r7
0000d4  d201              BCS      |L25.218|
;;;724    			{
;;;725    				taskYIELD_IF_USING_PREEMPTION();
0000d6  f7fffffe          BL       vPortYield
                  |L25.218|
;;;726    			}
;;;727    			else
;;;728    			{
;;;729    				mtCOVERAGE_TEST_MARKER();
;;;730    			}
;;;731    		}
;;;732    		else
;;;733    		{
;;;734    			mtCOVERAGE_TEST_MARKER();
;;;735    		}
;;;736    	}
;;;737    
;;;738    	return xReturn;
0000da  4630              MOV      r0,r6
;;;739    }
0000dc  b005              ADD      sp,sp,#0x14
0000de  e8bd8ff0          POP      {r4-r11,pc}
;;;740    /*-----------------------------------------------------------*/
                          ENDP

0000e2  0000              DCW      0x0000
                  |L25.228|
                          DCD      uxCurrentNumberOfTasks
                  |L25.232|
                          DCD      pxCurrentTCB
                  |L25.236|
                          DCD      xSchedulerRunning
                  |L25.240|
                          DCD      uxTaskNumber
                  |L25.244|
                          DCD      uxTopReadyPriority
                  |L25.248|
                          DCD      pxReadyTasksLists

                          AREA ||i.xTaskGenericNotify||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotify PROC
;;;4138   
;;;4139   	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4140   	{
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;4141   	TCB_t * pxTCB;
;;;4142   	eNotifyValue eOriginalNotifyState;
;;;4143   	BaseType_t xReturn = pdPASS;
00000c  f04f0a01          MOV      r10,#1
;;;4144   
;;;4145   		configASSERT( xTaskToNotify );
;;;4146   		pxTCB = ( TCB_t * ) xTaskToNotify;
000010  464c              MOV      r4,r9
;;;4147   
;;;4148   		taskENTER_CRITICAL();
000012  f7fffffe          BL       vPortEnterCritical
;;;4149   		{
;;;4150   			if( pulPreviousNotificationValue != NULL )
000016  b10f              CBZ      r7,|L26.28|
;;;4151   			{
;;;4152   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
000018  6c60              LDR      r0,[r4,#0x44]
00001a  6038              STR      r0,[r7,#0]
                  |L26.28|
;;;4153   			}
;;;4154   
;;;4155   			eOriginalNotifyState = pxTCB->eNotifyState;
00001c  f8948048          LDRB     r8,[r4,#0x48]
;;;4156   
;;;4157   			pxTCB->eNotifyState = eNotified;
000020  2002              MOVS     r0,#2
000022  f8840048          STRB     r0,[r4,#0x48]
;;;4158   
;;;4159   			switch( eAction )
000026  2e05              CMP      r6,#5
000028  d217              BCS      |L26.90|
00002a  e8dff006          TBB      [pc,r6]
00002e  1503              DCB      0x15,0x03
000030  070b0d00          DCB      0x07,0x0b,0x0d,0x00
;;;4160   			{
;;;4161   				case eSetBits	:
;;;4162   					pxTCB->ulNotifiedValue |= ulValue;
000034  6c60              LDR      r0,[r4,#0x44]
000036  4328              ORRS     r0,r0,r5
000038  6460              STR      r0,[r4,#0x44]
;;;4163   					break;
00003a  e00e              B        |L26.90|
;;;4164   
;;;4165   				case eIncrement	:
;;;4166   					( pxTCB->ulNotifiedValue )++;
00003c  6c60              LDR      r0,[r4,#0x44]
00003e  1c40              ADDS     r0,r0,#1
000040  6460              STR      r0,[r4,#0x44]
;;;4167   					break;
000042  e00a              B        |L26.90|
;;;4168   
;;;4169   				case eSetValueWithOverwrite	:
;;;4170   					pxTCB->ulNotifiedValue = ulValue;
000044  6465              STR      r5,[r4,#0x44]
;;;4171   					break;
000046  e008              B        |L26.90|
;;;4172   
;;;4173   				case eSetValueWithoutOverwrite :
;;;4174   					if( eOriginalNotifyState != eNotified )
000048  f1b80f02          CMP      r8,#2
00004c  d001              BEQ      |L26.82|
;;;4175   					{
;;;4176   						pxTCB->ulNotifiedValue = ulValue;
00004e  6465              STR      r5,[r4,#0x44]
000050  e001              B        |L26.86|
                  |L26.82|
;;;4177   					}
;;;4178   					else
;;;4179   					{
;;;4180   						/* The value could not be written to the task. */
;;;4181   						xReturn = pdFAIL;
000052  f04f0a00          MOV      r10,#0
                  |L26.86|
;;;4182   					}
;;;4183   					break;
000056  e000              B        |L26.90|
;;;4184   
;;;4185   				case eNoAction:
;;;4186   					/* The task is being notified without its notify value being
;;;4187   					updated. */
;;;4188   					break;
000058  bf00              NOP      
                  |L26.90|
00005a  bf00              NOP                            ;4163
;;;4189   			}
;;;4190   
;;;4191   			traceTASK_NOTIFY();
;;;4192   
;;;4193   			/* If the task is in the blocked state specifically to wait for a
;;;4194   			notification then unblock it now. */
;;;4195   			if( eOriginalNotifyState == eWaitingNotification )
00005c  f1b80f01          CMP      r8,#1
000060  d11c              BNE      |L26.156|
;;;4196   			{
;;;4197   				( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000062  1d20              ADDS     r0,r4,#4
000064  f7fffffe          BL       uxListRemove
;;;4198   				prvAddTaskToReadyList( pxTCB );
000068  f894102c          LDRB     r1,[r4,#0x2c]
00006c  2001              MOVS     r0,#1
00006e  4088              LSLS     r0,r0,r1
000070  490d              LDR      r1,|L26.168|
000072  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000074  4308              ORRS     r0,r0,r1
000076  490c              LDR      r1,|L26.168|
000078  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00007a  6ae1              LDR      r1,[r4,#0x2c]
00007c  eb010181          ADD      r1,r1,r1,LSL #2
000080  4a0a              LDR      r2,|L26.172|
000082  eb020081          ADD      r0,r2,r1,LSL #2
000086  1d21              ADDS     r1,r4,#4
000088  f7fffffe          BL       vListInsertEnd
;;;4199   
;;;4200   				/* The task should not have been on an event list. */
;;;4201   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4202   
;;;4203   				#if( configUSE_TICKLESS_IDLE != 0 )
;;;4204   				{
;;;4205   					/* If a task is blocked waiting for a notification then
;;;4206   					xNextTaskUnblockTime might be set to the blocked task's time
;;;4207   					out time.  If the task is unblocked for a reason other than
;;;4208   					a timeout xNextTaskUnblockTime is normally left unchanged,
;;;4209   					because it will automatically get reset to a new value when
;;;4210   					the tick count equals xNextTaskUnblockTime.  However if
;;;4211   					tickless idling is used it might be more important to enter
;;;4212   					sleep mode at the earliest possible time - so reset
;;;4213   					xNextTaskUnblockTime here to ensure it is updated at the
;;;4214   					earliest possible time. */
;;;4215   					prvResetNextTaskUnblockTime();
;;;4216   				}
;;;4217   				#endif
;;;4218   
;;;4219   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
00008c  4908              LDR      r1,|L26.176|
00008e  6ae0              LDR      r0,[r4,#0x2c]
000090  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000092  6ac9              LDR      r1,[r1,#0x2c]
000094  4288              CMP      r0,r1
000096  d901              BLS      |L26.156|
;;;4220   				{
;;;4221   					/* The notified task has a priority above the currently
;;;4222   					executing task so a yield is required. */
;;;4223   					taskYIELD_IF_USING_PREEMPTION();
000098  f7fffffe          BL       vPortYield
                  |L26.156|
;;;4224   				}
;;;4225   				else
;;;4226   				{
;;;4227   					mtCOVERAGE_TEST_MARKER();
;;;4228   				}
;;;4229   			}
;;;4230   			else
;;;4231   			{
;;;4232   				mtCOVERAGE_TEST_MARKER();
;;;4233   			}
;;;4234   		}
;;;4235   		taskEXIT_CRITICAL();
00009c  f7fffffe          BL       vPortExitCritical
;;;4236   
;;;4237   		return xReturn;
0000a0  4650              MOV      r0,r10
;;;4238   	}
0000a2  e8bd87f0          POP      {r4-r10,pc}
;;;4239   
                          ENDP

0000a6  0000              DCW      0x0000
                  |L26.168|
                          DCD      uxTopReadyPriority
                  |L26.172|
                          DCD      pxReadyTasksLists
                  |L26.176|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskGenericNotifyFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGenericNotifyFromISR PROC
;;;4244   
;;;4245   	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;4246   	{
000004  4681              MOV      r9,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
00000c  f8dda028          LDR      r10,[sp,#0x28]
;;;4247   	TCB_t * pxTCB;
;;;4248   	eNotifyValue eOriginalNotifyState;
;;;4249   	BaseType_t xReturn = pdPASS;
000010  f04f0b01          MOV      r11,#1
;;;4250   	UBaseType_t uxSavedInterruptStatus;
;;;4251   
;;;4252   		configASSERT( xTaskToNotify );
;;;4253   
;;;4254   		/* RTOS ports that support interrupt nesting have the concept of a
;;;4255   		maximum	system call (or maximum API call) interrupt priority.
;;;4256   		Interrupts that are	above the maximum system call priority are keep
;;;4257   		permanently enabled, even when the RTOS kernel is in a critical section,
;;;4258   		but cannot make any calls to FreeRTOS API functions.  If configASSERT()
;;;4259   		is defined in FreeRTOSConfig.h then
;;;4260   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;4261   		failure if a FreeRTOS API function is called from an interrupt that has
;;;4262   		been assigned a priority above the configured maximum system call
;;;4263   		priority.  Only FreeRTOS functions that end in FromISR can be called
;;;4264   		from interrupts	that have been assigned a priority at or (logically)
;;;4265   		below the maximum system call interrupt priority.  FreeRTOS maintains a
;;;4266   		separate interrupt safe API to ensure interrupt entry is as fast and as
;;;4267   		simple as possible.  More information (albeit Cortex-M specific) is
;;;4268   		provided on the following link:
;;;4269   		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;4270   		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;4271   
;;;4272   		pxTCB = ( TCB_t * ) xTaskToNotify;
000014  464c              MOV      r4,r9
;;;4273   
;;;4274   		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
000016  f7fffffe          BL       ulPortSetInterruptMask
00001a  9000              STR      r0,[sp,#0]
;;;4275   		{
;;;4276   			if( pulPreviousNotificationValue != NULL )
00001c  b10f              CBZ      r7,|L27.34|
;;;4277   			{
;;;4278   				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
00001e  6c60              LDR      r0,[r4,#0x44]
000020  6038              STR      r0,[r7,#0]
                  |L27.34|
;;;4279   			}
;;;4280   
;;;4281   			eOriginalNotifyState = pxTCB->eNotifyState;
000022  f8948048          LDRB     r8,[r4,#0x48]
;;;4282   			pxTCB->eNotifyState = eNotified;
000026  2002              MOVS     r0,#2
000028  f8840048          STRB     r0,[r4,#0x48]
;;;4283   
;;;4284   			switch( eAction )
00002c  2e05              CMP      r6,#5
00002e  d217              BCS      |L27.96|
000030  e8dff006          TBB      [pc,r6]
000034  1503070b          DCB      0x15,0x03,0x07,0x0b
000038  0d00              DCB      0x0d,0x00
;;;4285   			{
;;;4286   				case eSetBits	:
;;;4287   					pxTCB->ulNotifiedValue |= ulValue;
00003a  6c60              LDR      r0,[r4,#0x44]
00003c  4328              ORRS     r0,r0,r5
00003e  6460              STR      r0,[r4,#0x44]
;;;4288   					break;
000040  e00e              B        |L27.96|
;;;4289   
;;;4290   				case eIncrement	:
;;;4291   					( pxTCB->ulNotifiedValue )++;
000042  6c60              LDR      r0,[r4,#0x44]
000044  1c40              ADDS     r0,r0,#1
000046  6460              STR      r0,[r4,#0x44]
;;;4292   					break;
000048  e00a              B        |L27.96|
;;;4293   
;;;4294   				case eSetValueWithOverwrite	:
;;;4295   					pxTCB->ulNotifiedValue = ulValue;
00004a  6465              STR      r5,[r4,#0x44]
;;;4296   					break;
00004c  e008              B        |L27.96|
;;;4297   
;;;4298   				case eSetValueWithoutOverwrite :
;;;4299   					if( eOriginalNotifyState != eNotified )
00004e  f1b80f02          CMP      r8,#2
000052  d001              BEQ      |L27.88|
;;;4300   					{
;;;4301   						pxTCB->ulNotifiedValue = ulValue;
000054  6465              STR      r5,[r4,#0x44]
000056  e001              B        |L27.92|
                  |L27.88|
;;;4302   					}
;;;4303   					else
;;;4304   					{
;;;4305   						/* The value could not be written to the task. */
;;;4306   						xReturn = pdFAIL;
000058  f04f0b00          MOV      r11,#0
                  |L27.92|
;;;4307   					}
;;;4308   					break;
00005c  e000              B        |L27.96|
;;;4309   
;;;4310   				case eNoAction :
;;;4311   					/* The task is being notified without its notify value being
;;;4312   					updated. */
;;;4313   					break;
00005e  bf00              NOP      
                  |L27.96|
000060  bf00              NOP                            ;4288
;;;4314   			}
;;;4315   
;;;4316   			traceTASK_NOTIFY_FROM_ISR();
;;;4317   
;;;4318   			/* If the task is in the blocked state specifically to wait for a
;;;4319   			notification then unblock it now. */
;;;4320   			if( eOriginalNotifyState == eWaitingNotification )
000062  f1b80f01          CMP      r8,#1
000066  d129              BNE      |L27.188|
;;;4321   			{
;;;4322   				/* The task should not have been on an event list. */
;;;4323   				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
;;;4324   
;;;4325   				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000068  4817              LDR      r0,|L27.200|
00006a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00006c  b9a8              CBNZ     r0,|L27.154|
;;;4326   				{
;;;4327   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
00006e  1d20              ADDS     r0,r4,#4
000070  f7fffffe          BL       uxListRemove
;;;4328   					prvAddTaskToReadyList( pxTCB );
000074  f894102c          LDRB     r1,[r4,#0x2c]
000078  2001              MOVS     r0,#1
00007a  4088              LSLS     r0,r0,r1
00007c  4913              LDR      r1,|L27.204|
00007e  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000080  4308              ORRS     r0,r0,r1
000082  4912              LDR      r1,|L27.204|
000084  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
000086  6ae1              LDR      r1,[r4,#0x2c]
000088  eb010181          ADD      r1,r1,r1,LSL #2
00008c  4a10              LDR      r2,|L27.208|
00008e  eb020081          ADD      r0,r2,r1,LSL #2
000092  1d21              ADDS     r1,r4,#4
000094  f7fffffe          BL       vListInsertEnd
000098  e004              B        |L27.164|
                  |L27.154|
;;;4329   				}
;;;4330   				else
;;;4331   				{
;;;4332   					/* The delayed and ready lists cannot be accessed, so hold
;;;4333   					this task pending until the scheduler is resumed. */
;;;4334   					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
00009a  f1040118          ADD      r1,r4,#0x18
00009e  480d              LDR      r0,|L27.212|
0000a0  f7fffffe          BL       vListInsertEnd
                  |L27.164|
;;;4335   				}
;;;4336   
;;;4337   				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
0000a4  490c              LDR      r1,|L27.216|
0000a6  6ae0              LDR      r0,[r4,#0x2c]
0000a8  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000aa  6ac9              LDR      r1,[r1,#0x2c]
0000ac  4288              CMP      r0,r1
0000ae  d905              BLS      |L27.188|
;;;4338   				{
;;;4339   					/* The notified task has a priority above the currently
;;;4340   					executing task so a yield is required. */
;;;4341   					if( pxHigherPriorityTaskWoken != NULL )
0000b0  f1ba0f00          CMP      r10,#0
0000b4  d002              BEQ      |L27.188|
;;;4342   					{
;;;4343   						*pxHigherPriorityTaskWoken = pdTRUE;
0000b6  2001              MOVS     r0,#1
0000b8  f8ca0000          STR      r0,[r10,#0]
                  |L27.188|
;;;4344   					}
;;;4345   				}
;;;4346   				else
;;;4347   				{
;;;4348   					mtCOVERAGE_TEST_MARKER();
;;;4349   				}
;;;4350   			}
;;;4351   		}
;;;4352   		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
0000bc  9800              LDR      r0,[sp,#0]
0000be  f7fffffe          BL       vPortClearInterruptMask
;;;4353   
;;;4354   		return xReturn;
0000c2  4658              MOV      r0,r11
;;;4355   	}
0000c4  e8bd8ff8          POP      {r3-r11,pc}
;;;4356   
                          ENDP

                  |L27.200|
                          DCD      uxSchedulerSuspended
                  |L27.204|
                          DCD      uxTopReadyPriority
                  |L27.208|
                          DCD      pxReadyTasksLists
                  |L27.212|
                          DCD      xPendingReadyList
                  |L27.216|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskGetTickCount||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCount PROC
;;;1763   
;;;1764   TickType_t xTaskGetTickCount( void )
000000  4901              LDR      r1,|L28.8|
;;;1765   {
;;;1766   TickType_t xTicks;
;;;1767   
;;;1768   	/* Critical section required if running on a 16 bit processor. */
;;;1769   	portTICK_TYPE_ENTER_CRITICAL();
;;;1770   	{
;;;1771   		xTicks = xTickCount;
000002  6808              LDR      r0,[r1,#0]  ; xTickCount
;;;1772   	}
;;;1773   	portTICK_TYPE_EXIT_CRITICAL();
;;;1774   
;;;1775   	return xTicks;
;;;1776   }
000004  4770              BX       lr
;;;1777   /*-----------------------------------------------------------*/
                          ENDP

000006  0000              DCW      0x0000
                  |L28.8|
                          DCD      xTickCount

                          AREA ||i.xTaskGetTickCountFromISR||, CODE, READONLY, ALIGN=2

                  xTaskGetTickCountFromISR PROC
;;;1778   
;;;1779   TickType_t xTaskGetTickCountFromISR( void )
000000  2100              MOVS     r1,#0
;;;1780   {
;;;1781   TickType_t xReturn;
;;;1782   UBaseType_t uxSavedInterruptStatus;
;;;1783   
;;;1784   	/* RTOS ports that support interrupt nesting have the concept of a maximum
;;;1785   	system call (or maximum API call) interrupt priority.  Interrupts that are
;;;1786   	above the maximum system call priority are kept permanently enabled, even
;;;1787   	when the RTOS kernel is in a critical section, but cannot make any calls to
;;;1788   	FreeRTOS API functions.  If configASSERT() is defined in FreeRTOSConfig.h
;;;1789   	then portASSERT_IF_INTERRUPT_PRIORITY_INVALID() will result in an assertion
;;;1790   	failure if a FreeRTOS API function is called from an interrupt that has been
;;;1791   	assigned a priority above the configured maximum system call priority.
;;;1792   	Only FreeRTOS functions that end in FromISR can be called from interrupts
;;;1793   	that have been assigned a priority at or (logically) below the maximum
;;;1794   	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
;;;1795   	safe API to ensure interrupt entry is as fast and as simple as possible.
;;;1796   	More information (albeit Cortex-M specific) is provided on the following
;;;1797   	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
;;;1798   	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
;;;1799   
;;;1800   	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
;;;1801   	{
;;;1802   		xReturn = xTickCount;
000002  4a01              LDR      r2,|L29.8|
000004  6810              LDR      r0,[r2,#0]  ; xTickCount
;;;1803   	}
;;;1804   	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
;;;1805   
;;;1806   	return xReturn;
;;;1807   }
000006  4770              BX       lr
;;;1808   /*-----------------------------------------------------------*/
                          ENDP

                  |L29.8|
                          DCD      xTickCount

                          AREA ||i.xTaskIncrementTick||, CODE, READONLY, ALIGN=2

                  xTaskIncrementTick PROC
;;;1938   
;;;1939   BaseType_t xTaskIncrementTick( void )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1940   {
;;;1941   TCB_t * pxTCB;
;;;1942   TickType_t xItemValue;
;;;1943   BaseType_t xSwitchRequired = pdFALSE;
000004  2700              MOVS     r7,#0
;;;1944   
;;;1945   	/* Called by the portable layer each time a tick interrupt occurs.
;;;1946   	Increments the tick then checks to see if the new tick value will cause any
;;;1947   	tasks to be unblocked. */
;;;1948   	traceTASK_INCREMENT_TICK( xTickCount );
;;;1949   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000006  483b              LDR      r0,|L30.244|
000008  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000a  2800              CMP      r0,#0
00000c  d165              BNE      |L30.218|
;;;1950   	{
;;;1951   		/* Increment the RTOS tick, switching the delayed and overflowed
;;;1952   		delayed lists if it wraps to 0. */
;;;1953   		++xTickCount;
00000e  483a              LDR      r0,|L30.248|
000010  6800              LDR      r0,[r0,#0]  ; xTickCount
000012  1c40              ADDS     r0,r0,#1
000014  4938              LDR      r1,|L30.248|
000016  6008              STR      r0,[r1,#0]  ; xTickCount
;;;1954   
;;;1955   		{
;;;1956   			/* Minor optimisation.  The tick count cannot change in this
;;;1957   			block. */
;;;1958   			const TickType_t xConstTickCount = xTickCount;
000018  4608              MOV      r0,r1
00001a  6806              LDR      r6,[r0,#0]  ; xTickCount
;;;1959   
;;;1960   			if( xConstTickCount == ( TickType_t ) 0U )
00001c  b98e              CBNZ     r6,|L30.66|
;;;1961   			{
;;;1962   				taskSWITCH_DELAYED_LISTS();
00001e  4837              LDR      r0,|L30.252|
000020  f8d08000          LDR      r8,[r0,#0]  ; pxDelayedTaskList
000024  4836              LDR      r0,|L30.256|
000026  6800              LDR      r0,[r0,#0]  ; pxOverflowDelayedTaskList
000028  4934              LDR      r1,|L30.252|
00002a  6008              STR      r0,[r1,#0]  ; pxDelayedTaskList
00002c  4834              LDR      r0,|L30.256|
00002e  f8c08000          STR      r8,[r0,#0]  ; pxOverflowDelayedTaskList
000032  4834              LDR      r0,|L30.260|
000034  6800              LDR      r0,[r0,#0]  ; xNumOfOverflows
000036  1c40              ADDS     r0,r0,#1
000038  4932              LDR      r1,|L30.260|
00003a  6008              STR      r0,[r1,#0]  ; xNumOfOverflows
00003c  f7fffffe          BL       prvResetNextTaskUnblockTime
000040  bf00              NOP      
                  |L30.66|
;;;1963   			}
;;;1964   			else
;;;1965   			{
;;;1966   				mtCOVERAGE_TEST_MARKER();
;;;1967   			}
;;;1968   
;;;1969   			/* See if this tick has made a timeout expire.  Tasks are stored in
;;;1970   			the	queue in the order of their wake time - meaning once one task
;;;1971   			has been found whose block time has not expired there is no need to
;;;1972   			look any further down the list. */
;;;1973   			if( xConstTickCount >= xNextTaskUnblockTime )
000042  4831              LDR      r0,|L30.264|
000044  6800              LDR      r0,[r0,#0]  ; xNextTaskUnblockTime
000046  4286              CMP      r6,r0
000048  d33b              BCC      |L30.194|
;;;1974   			{
;;;1975   				for( ;; )
00004a  bf00              NOP      
                  |L30.76|
;;;1976   				{
;;;1977   					if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
00004c  482b              LDR      r0,|L30.252|
00004e  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
000050  6800              LDR      r0,[r0,#0]
000052  b908              CBNZ     r0,|L30.88|
000054  2001              MOVS     r0,#1
000056  e000              B        |L30.90|
                  |L30.88|
000058  2000              MOVS     r0,#0
                  |L30.90|
00005a  b120              CBZ      r0,|L30.102|
;;;1978   					{
;;;1979   						/* The delayed list is empty.  Set xNextTaskUnblockTime
;;;1980   						to the maximum possible value so it is extremely
;;;1981   						unlikely that the
;;;1982   						if( xTickCount >= xNextTaskUnblockTime ) test will pass
;;;1983   						next time through. */
;;;1984   						xNextTaskUnblockTime = portMAX_DELAY;
00005c  f04f30ff          MOV      r0,#0xffffffff
000060  4929              LDR      r1,|L30.264|
000062  6008              STR      r0,[r1,#0]  ; xNextTaskUnblockTime
;;;1985   						break;
000064  e02c              B        |L30.192|
                  |L30.102|
;;;1986   					}
;;;1987   					else
;;;1988   					{
;;;1989   						/* The delayed list is not empty, get the value of the
;;;1990   						item at the head of the delayed list.  This is the time
;;;1991   						at which the task at the head of the delayed list must
;;;1992   						be removed from the Blocked state. */
;;;1993   						pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
000066  4825              LDR      r0,|L30.252|
000068  6800              LDR      r0,[r0,#0]  ; pxDelayedTaskList
00006a  68c0              LDR      r0,[r0,#0xc]
00006c  68c4              LDR      r4,[r0,#0xc]
;;;1994   						xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
00006e  6865              LDR      r5,[r4,#4]
;;;1995   
;;;1996   						if( xConstTickCount < xItemValue )
000070  42ae              CMP      r6,r5
000072  d202              BCS      |L30.122|
;;;1997   						{
;;;1998   							/* It is not time to unblock this item yet, but the
;;;1999   							item value is the time at which the task at the head
;;;2000   							of the blocked list must be removed from the Blocked
;;;2001   							state -	so record the item value in
;;;2002   							xNextTaskUnblockTime. */
;;;2003   							xNextTaskUnblockTime = xItemValue;
000074  4824              LDR      r0,|L30.264|
000076  6005              STR      r5,[r0,#0]  ; xNextTaskUnblockTime
;;;2004   							break;
000078  e022              B        |L30.192|
                  |L30.122|
;;;2005   						}
;;;2006   						else
;;;2007   						{
;;;2008   							mtCOVERAGE_TEST_MARKER();
;;;2009   						}
;;;2010   
;;;2011   						/* It is time to remove the item from the Blocked state. */
;;;2012   						( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
00007a  1d20              ADDS     r0,r4,#4
00007c  f7fffffe          BL       uxListRemove
;;;2013   
;;;2014   						/* Is the task waiting on an event also?  If so remove
;;;2015   						it from the event list. */
;;;2016   						if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
000080  6aa0              LDR      r0,[r4,#0x28]
000082  b118              CBZ      r0,|L30.140|
;;;2017   						{
;;;2018   							( void ) uxListRemove( &( pxTCB->xEventListItem ) );
000084  f1040018          ADD      r0,r4,#0x18
000088  f7fffffe          BL       uxListRemove
                  |L30.140|
;;;2019   						}
;;;2020   						else
;;;2021   						{
;;;2022   							mtCOVERAGE_TEST_MARKER();
;;;2023   						}
;;;2024   
;;;2025   						/* Place the unblocked task into the appropriate ready
;;;2026   						list. */
;;;2027   						prvAddTaskToReadyList( pxTCB );
00008c  f894102c          LDRB     r1,[r4,#0x2c]
000090  2001              MOVS     r0,#1
000092  4088              LSLS     r0,r0,r1
000094  491d              LDR      r1,|L30.268|
000096  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000098  4308              ORRS     r0,r0,r1
00009a  491c              LDR      r1,|L30.268|
00009c  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00009e  6ae1              LDR      r1,[r4,#0x2c]
0000a0  eb010181          ADD      r1,r1,r1,LSL #2
0000a4  4a1a              LDR      r2,|L30.272|
0000a6  eb020081          ADD      r0,r2,r1,LSL #2
0000aa  1d21              ADDS     r1,r4,#4
0000ac  f7fffffe          BL       vListInsertEnd
;;;2028   
;;;2029   						/* A task being unblocked cannot cause an immediate
;;;2030   						context switch if preemption is turned off. */
;;;2031   						#if (  configUSE_PREEMPTION == 1 )
;;;2032   						{
;;;2033   							/* Preemption is on, but a context switch should
;;;2034   							only be performed if the unblocked task has a
;;;2035   							priority that is equal to or higher than the
;;;2036   							currently executing task. */
;;;2037   							if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
0000b0  4918              LDR      r1,|L30.276|
0000b2  6ae0              LDR      r0,[r4,#0x2c]
0000b4  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000b6  6ac9              LDR      r1,[r1,#0x2c]
0000b8  4288              CMP      r0,r1
0000ba  d3c7              BCC      |L30.76|
;;;2038   							{
;;;2039   								xSwitchRequired = pdTRUE;
0000bc  2701              MOVS     r7,#1
0000be  e7c5              B        |L30.76|
                  |L30.192|
0000c0  bf00              NOP                            ;1985
                  |L30.194|
;;;2040   							}
;;;2041   							else
;;;2042   							{
;;;2043   								mtCOVERAGE_TEST_MARKER();
;;;2044   							}
;;;2045   						}
;;;2046   						#endif /* configUSE_PREEMPTION */
;;;2047   					}
;;;2048   				}
;;;2049   			}
;;;2050   		}
;;;2051   
;;;2052   		/* Tasks of equal priority to the currently running task will share
;;;2053   		processing time (time slice) if preemption is on, and the application
;;;2054   		writer has not explicitly turned time slicing off. */
;;;2055   		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
;;;2056   		{
;;;2057   			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
0000c2  4814              LDR      r0,|L30.276|
0000c4  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
0000c6  6ac0              LDR      r0,[r0,#0x2c]
0000c8  eb000080          ADD      r0,r0,r0,LSL #2
0000cc  4910              LDR      r1,|L30.272|
0000ce  f8510020          LDR      r0,[r1,r0,LSL #2]
0000d2  2801              CMP      r0,#1
0000d4  d906              BLS      |L30.228|
;;;2058   			{
;;;2059   				xSwitchRequired = pdTRUE;
0000d6  2701              MOVS     r7,#1
0000d8  e004              B        |L30.228|
                  |L30.218|
;;;2060   			}
;;;2061   			else
;;;2062   			{
;;;2063   				mtCOVERAGE_TEST_MARKER();
;;;2064   			}
;;;2065   		}
;;;2066   		#endif /* ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) ) */
;;;2067   
;;;2068   		#if ( configUSE_TICK_HOOK == 1 )
;;;2069   		{
;;;2070   			/* Guard against the tick hook being called when the pended tick
;;;2071   			count is being unwound (when the scheduler is being unlocked). */
;;;2072   			if( uxPendedTicks == ( UBaseType_t ) 0U )
;;;2073   			{
;;;2074   				vApplicationTickHook();
;;;2075   			}
;;;2076   			else
;;;2077   			{
;;;2078   				mtCOVERAGE_TEST_MARKER();
;;;2079   			}
;;;2080   		}
;;;2081   		#endif /* configUSE_TICK_HOOK */
;;;2082   	}
;;;2083   	else
;;;2084   	{
;;;2085   		++uxPendedTicks;
0000da  480f              LDR      r0,|L30.280|
0000dc  6800              LDR      r0,[r0,#0]  ; uxPendedTicks
0000de  1c40              ADDS     r0,r0,#1
0000e0  490d              LDR      r1,|L30.280|
0000e2  6008              STR      r0,[r1,#0]  ; uxPendedTicks
                  |L30.228|
;;;2086   
;;;2087   		/* The tick hook gets called at regular intervals, even if the
;;;2088   		scheduler is locked. */
;;;2089   		#if ( configUSE_TICK_HOOK == 1 )
;;;2090   		{
;;;2091   			vApplicationTickHook();
;;;2092   		}
;;;2093   		#endif
;;;2094   	}
;;;2095   
;;;2096   	#if ( configUSE_PREEMPTION == 1 )
;;;2097   	{
;;;2098   		if( xYieldPending != pdFALSE )
0000e4  480d              LDR      r0,|L30.284|
0000e6  6800              LDR      r0,[r0,#0]  ; xYieldPending
0000e8  b100              CBZ      r0,|L30.236|
;;;2099   		{
;;;2100   			xSwitchRequired = pdTRUE;
0000ea  2701              MOVS     r7,#1
                  |L30.236|
;;;2101   		}
;;;2102   		else
;;;2103   		{
;;;2104   			mtCOVERAGE_TEST_MARKER();
;;;2105   		}
;;;2106   	}
;;;2107   	#endif /* configUSE_PREEMPTION */
;;;2108   
;;;2109   	return xSwitchRequired;
0000ec  4638              MOV      r0,r7
;;;2110   }
0000ee  e8bd81f0          POP      {r4-r8,pc}
;;;2111   /*-----------------------------------------------------------*/
                          ENDP

0000f2  0000              DCW      0x0000
                  |L30.244|
                          DCD      uxSchedulerSuspended
                  |L30.248|
                          DCD      xTickCount
                  |L30.252|
                          DCD      pxDelayedTaskList
                  |L30.256|
                          DCD      pxOverflowDelayedTaskList
                  |L30.260|
                          DCD      xNumOfOverflows
                  |L30.264|
                          DCD      xNextTaskUnblockTime
                  |L30.268|
                          DCD      uxTopReadyPriority
                  |L30.272|
                          DCD      pxReadyTasksLists
                  |L30.276|
                          DCD      pxCurrentTCB
                  |L30.280|
                          DCD      uxPendedTicks
                  |L30.284|
                          DCD      xYieldPending

                          AREA ||i.xTaskNotifyStateClear||, CODE, READONLY, ALIGN=2

                  xTaskNotifyStateClear PROC
;;;4443   
;;;4444   	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
000000  b570              PUSH     {r4-r6,lr}
;;;4445   	{
000002  4604              MOV      r4,r0
;;;4446   	TCB_t *pxTCB;
;;;4447   	BaseType_t xReturn;
;;;4448   
;;;4449   		pxTCB = ( TCB_t * ) xTask;
000004  4626              MOV      r6,r4
;;;4450   
;;;4451   		/* If null is passed in here then it is the calling task that is having
;;;4452   		its notification state cleared. */
;;;4453   		pxTCB = prvGetTCBFromHandle( pxTCB );
000006  b916              CBNZ     r6,|L31.14|
000008  480a              LDR      r0,|L31.52|
00000a  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00000c  e000              B        |L31.16|
                  |L31.14|
00000e  4630              MOV      r0,r6
                  |L31.16|
000010  4606              MOV      r6,r0
;;;4454   
;;;4455   		taskENTER_CRITICAL();
000012  f7fffffe          BL       vPortEnterCritical
;;;4456   		{
;;;4457   			if( pxTCB->eNotifyState == eNotified )
000016  f8960048          LDRB     r0,[r6,#0x48]
00001a  2802              CMP      r0,#2
00001c  d104              BNE      |L31.40|
;;;4458   			{
;;;4459   				pxTCB->eNotifyState = eNotWaitingNotification;
00001e  2000              MOVS     r0,#0
000020  f8860048          STRB     r0,[r6,#0x48]
;;;4460   				xReturn = pdPASS;
000024  2501              MOVS     r5,#1
000026  e000              B        |L31.42|
                  |L31.40|
;;;4461   			}
;;;4462   			else
;;;4463   			{
;;;4464   				xReturn = pdFAIL;
000028  2500              MOVS     r5,#0
                  |L31.42|
;;;4465   			}
;;;4466   		}
;;;4467   		taskEXIT_CRITICAL();
00002a  f7fffffe          BL       vPortExitCritical
;;;4468   
;;;4469   		return xReturn;
00002e  4628              MOV      r0,r5
;;;4470   	}
000030  bd70              POP      {r4-r6,pc}
;;;4471   
                          ENDP

000032  0000              DCW      0x0000
                  |L31.52|
                          DCD      pxCurrentTCB

                          AREA ||i.xTaskNotifyWait||, CODE, READONLY, ALIGN=2

                  xTaskNotifyWait PROC
;;;4013   
;;;4014   	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;4015   	{
000004  4607              MOV      r7,r0
000006  4688              MOV      r8,r1
000008  4614              MOV      r4,r2
00000a  461d              MOV      r5,r3
;;;4016   	TickType_t xTimeToWake;
;;;4017   	BaseType_t xReturn;
;;;4018   
;;;4019   		taskENTER_CRITICAL();
00000c  f7fffffe          BL       vPortEnterCritical
;;;4020   		{
;;;4021   			/* Only block if a notification is not already pending. */
;;;4022   			if( pxCurrentTCB->eNotifyState != eNotified )
000010  4828              LDR      r0,|L32.180|
000012  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000014  f8900048          LDRB     r0,[r0,#0x48]
000018  2802              CMP      r0,#2
00001a  d026              BEQ      |L32.106|
;;;4023   			{
;;;4024   				/* Clear bits in the task's notification value as bits may get
;;;4025   				set	by the notifying task or interrupt.  This can be used to
;;;4026   				clear the value to zero. */
;;;4027   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
00001c  4925              LDR      r1,|L32.180|
00001e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000020  f1010044          ADD      r0,r1,#0x44
000024  6c49              LDR      r1,[r1,#0x44]
000026  43b9              BICS     r1,r1,r7
000028  6001              STR      r1,[r0,#0]
;;;4028   
;;;4029   				/* Mark this task as waiting for a notification. */
;;;4030   				pxCurrentTCB->eNotifyState = eWaitingNotification;
00002a  2001              MOVS     r0,#1
00002c  4921              LDR      r1,|L32.180|
00002e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000030  f8810048          STRB     r0,[r1,#0x48]
;;;4031   
;;;4032   				if( xTicksToWait > ( TickType_t ) 0 )
000034  b1cd              CBZ      r5,|L32.106|
;;;4033   				{
;;;4034   					/* The task is going to block.  First it must be removed
;;;4035   					from the	ready list. */
;;;4036   					if( uxListRemove( &( pxCurrentTCB->xGenericListItem ) ) == ( UBaseType_t ) 0 )
000036  481f              LDR      r0,|L32.180|
000038  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
00003a  1d00              ADDS     r0,r0,#4
00003c  f7fffffe          BL       uxListRemove
000040  b950              CBNZ     r0,|L32.88|
;;;4037   					{
;;;4038   						/* The current task must be in a ready list, so there is
;;;4039   						no need to check, and the port reset macro can be called
;;;4040   						directly. */
;;;4041   						portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
000042  481c              LDR      r0,|L32.180|
000044  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000046  f890102c          LDRB     r1,[r0,#0x2c]
00004a  2001              MOVS     r0,#1
00004c  4088              LSLS     r0,r0,r1
00004e  491a              LDR      r1,|L32.184|
000050  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000052  4381              BICS     r1,r1,r0
000054  4818              LDR      r0,|L32.184|
000056  6001              STR      r1,[r0,#0]  ; uxTopReadyPriority
                  |L32.88|
;;;4042   					}
;;;4043   					else
;;;4044   					{
;;;4045   						mtCOVERAGE_TEST_MARKER();
;;;4046   					}
;;;4047   
;;;4048   					#if ( INCLUDE_vTaskSuspend == 1 )
;;;4049   					{
;;;4050   						if( xTicksToWait == portMAX_DELAY )
;;;4051   						{
;;;4052   							/* Add the task to the suspended task list instead
;;;4053   							of a delayed task list to ensure the task is not
;;;4054   							woken by a timing event.  It will block
;;;4055   							indefinitely. */
;;;4056   							vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xGenericListItem ) );
;;;4057   						}
;;;4058   						else
;;;4059   						{
;;;4060   							/* Calculate the time at which the task should be
;;;4061   							woken if no notification events occur.  This may
;;;4062   							overflow but this doesn't matter, the scheduler will
;;;4063   							handle it. */
;;;4064   							xTimeToWake = xTickCount + xTicksToWait;
;;;4065   							prvAddCurrentTaskToDelayedList( xTimeToWake );
;;;4066   						}
;;;4067   					}
;;;4068   					#else /* INCLUDE_vTaskSuspend */
;;;4069   					{
;;;4070   							/* Calculate the time at which the task should be
;;;4071   							woken if the event does not occur.  This may
;;;4072   							overflow but this doesn't matter, the scheduler will
;;;4073   							handle it. */
;;;4074   							xTimeToWake = xTickCount + xTicksToWait;
000058  4818              LDR      r0,|L32.188|
00005a  6800              LDR      r0,[r0,#0]  ; xTickCount
00005c  eb000905          ADD      r9,r0,r5
;;;4075   							prvAddCurrentTaskToDelayedList( xTimeToWake );
000060  4648              MOV      r0,r9
000062  f7fffffe          BL       prvAddCurrentTaskToDelayedList
;;;4076   					}
;;;4077   					#endif /* INCLUDE_vTaskSuspend */
;;;4078   
;;;4079   					traceTASK_NOTIFY_WAIT_BLOCK();
;;;4080   
;;;4081   					/* All ports are written to allow a yield in a critical
;;;4082   					section (some will yield immediately, others wait until the
;;;4083   					critical section exits) - but it is not something that
;;;4084   					application code should ever do. */
;;;4085   					portYIELD_WITHIN_API();
000066  f7fffffe          BL       vPortYield
                  |L32.106|
;;;4086   				}
;;;4087   				else
;;;4088   				{
;;;4089   					mtCOVERAGE_TEST_MARKER();
;;;4090   				}
;;;4091   			}
;;;4092   			else
;;;4093   			{
;;;4094   				mtCOVERAGE_TEST_MARKER();
;;;4095   			}
;;;4096   		}
;;;4097   		taskEXIT_CRITICAL();
00006a  f7fffffe          BL       vPortExitCritical
;;;4098   
;;;4099   		taskENTER_CRITICAL();
00006e  f7fffffe          BL       vPortEnterCritical
;;;4100   		{
;;;4101   			traceTASK_NOTIFY_WAIT();
;;;4102   
;;;4103   			if( pulNotificationValue != NULL )
000072  b11c              CBZ      r4,|L32.124|
;;;4104   			{
;;;4105   				/* Output the current notification value, which may or may not
;;;4106   				have changed. */
;;;4107   				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
000074  480f              LDR      r0,|L32.180|
000076  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000078  6c40              LDR      r0,[r0,#0x44]
00007a  6020              STR      r0,[r4,#0]
                  |L32.124|
;;;4108   			}
;;;4109   
;;;4110   			/* If eNotifyValue is set then either the task never entered the
;;;4111   			blocked state (because a notification was already pending) or the
;;;4112   			task unblocked because of a notification.  Otherwise the task
;;;4113   			unblocked because of a timeout. */
;;;4114   			if( pxCurrentTCB->eNotifyState == eWaitingNotification )
00007c  480d              LDR      r0,|L32.180|
00007e  6800              LDR      r0,[r0,#0]  ; pxCurrentTCB
000080  f8900048          LDRB     r0,[r0,#0x48]
000084  2801              CMP      r0,#1
000086  d101              BNE      |L32.140|
;;;4115   			{
;;;4116   				/* A notification was not received. */
;;;4117   				xReturn = pdFALSE;
000088  2600              MOVS     r6,#0
00008a  e008              B        |L32.158|
                  |L32.140|
;;;4118   			}
;;;4119   			else
;;;4120   			{
;;;4121   				/* A notification was already pending or a notification was
;;;4122   				received while the task was waiting. */
;;;4123   				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
00008c  4909              LDR      r1,|L32.180|
00008e  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000090  f1010044          ADD      r0,r1,#0x44
000094  6c49              LDR      r1,[r1,#0x44]
000096  ea210108          BIC      r1,r1,r8
00009a  6001              STR      r1,[r0,#0]
;;;4124   				xReturn = pdTRUE;
00009c  2601              MOVS     r6,#1
                  |L32.158|
;;;4125   			}
;;;4126   
;;;4127   			pxCurrentTCB->eNotifyState = eNotWaitingNotification;
00009e  2000              MOVS     r0,#0
0000a0  4904              LDR      r1,|L32.180|
0000a2  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
0000a4  f8810048          STRB     r0,[r1,#0x48]
;;;4128   		}
;;;4129   		taskEXIT_CRITICAL();
0000a8  f7fffffe          BL       vPortExitCritical
;;;4130   
;;;4131   		return xReturn;
0000ac  4630              MOV      r0,r6
;;;4132   	}
0000ae  e8bd87f0          POP      {r4-r10,pc}
;;;4133   
                          ENDP

0000b2  0000              DCW      0x0000
                  |L32.180|
                          DCD      pxCurrentTCB
                  |L32.184|
                          DCD      uxTopReadyPriority
                  |L32.188|
                          DCD      xTickCount

                          AREA ||i.xTaskRemoveFromEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromEventList PROC
;;;2464   
;;;2465   BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
000000  b570              PUSH     {r4-r6,lr}
;;;2466   {
000002  4606              MOV      r6,r0
;;;2467   TCB_t *pxUnblockedTCB;
;;;2468   BaseType_t xReturn;
;;;2469   
;;;2470   	/* THIS FUNCTION MUST BE CALLED FROM A CRITICAL SECTION.  It can also be
;;;2471   	called from a critical section within an ISR. */
;;;2472   
;;;2473   	/* The event list is sorted in priority order, so the first in the list can
;;;2474   	be removed as it is known to be the highest priority.  Remove the TCB from
;;;2475   	the delayed list, and add it to the ready list.
;;;2476   
;;;2477   	If an event is for a queue that is locked then this function will never
;;;2478   	get called - the lock count on the queue will get modified instead.  This
;;;2479   	means exclusive access to the event list is guaranteed here.
;;;2480   
;;;2481   	This function assumes that a check has already been made to ensure that
;;;2482   	pxEventList is not empty. */
;;;2483   	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
000004  68f0              LDR      r0,[r6,#0xc]
000006  68c4              LDR      r4,[r0,#0xc]
;;;2484   	configASSERT( pxUnblockedTCB );
;;;2485   	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
000008  f1040018          ADD      r0,r4,#0x18
00000c  f7fffffe          BL       uxListRemove
;;;2486   
;;;2487   	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000010  4815              LDR      r0,|L33.104|
000012  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000014  b9a8              CBNZ     r0,|L33.66|
;;;2488   	{
;;;2489   		( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
000016  1d20              ADDS     r0,r4,#4
000018  f7fffffe          BL       uxListRemove
;;;2490   		prvAddTaskToReadyList( pxUnblockedTCB );
00001c  f894102c          LDRB     r1,[r4,#0x2c]
000020  2001              MOVS     r0,#1
000022  4088              LSLS     r0,r0,r1
000024  4911              LDR      r1,|L33.108|
000026  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000028  4308              ORRS     r0,r0,r1
00002a  4910              LDR      r1,|L33.108|
00002c  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00002e  6ae1              LDR      r1,[r4,#0x2c]
000030  eb010181          ADD      r1,r1,r1,LSL #2
000034  4a0e              LDR      r2,|L33.112|
000036  eb020081          ADD      r0,r2,r1,LSL #2
00003a  1d21              ADDS     r1,r4,#4
00003c  f7fffffe          BL       vListInsertEnd
000040  e004              B        |L33.76|
                  |L33.66|
;;;2491   	}
;;;2492   	else
;;;2493   	{
;;;2494   		/* The delayed and ready lists cannot be accessed, so hold this task
;;;2495   		pending until the scheduler is resumed. */
;;;2496   		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
000042  f1040118          ADD      r1,r4,#0x18
000046  480b              LDR      r0,|L33.116|
000048  f7fffffe          BL       vListInsertEnd
                  |L33.76|
;;;2497   	}
;;;2498   
;;;2499   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
00004c  490a              LDR      r1,|L33.120|
00004e  6ae0              LDR      r0,[r4,#0x2c]
000050  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000052  6ac9              LDR      r1,[r1,#0x2c]
000054  4288              CMP      r0,r1
000056  d904              BLS      |L33.98|
;;;2500   	{
;;;2501   		/* Return true if the task removed from the event list has a higher
;;;2502   		priority than the calling task.  This allows the calling task to know if
;;;2503   		it should force a context switch now. */
;;;2504   		xReturn = pdTRUE;
000058  2501              MOVS     r5,#1
;;;2505   
;;;2506   		/* Mark that a yield is pending in case the user is not using the
;;;2507   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2508   		xYieldPending = pdTRUE;
00005a  2001              MOVS     r0,#1
00005c  4907              LDR      r1,|L33.124|
00005e  6008              STR      r0,[r1,#0]  ; xYieldPending
000060  e000              B        |L33.100|
                  |L33.98|
;;;2509   	}
;;;2510   	else
;;;2511   	{
;;;2512   		xReturn = pdFALSE;
000062  2500              MOVS     r5,#0
                  |L33.100|
;;;2513   	}
;;;2514   
;;;2515   	#if( configUSE_TICKLESS_IDLE != 0 )
;;;2516   	{
;;;2517   		/* If a task is blocked on a kernel object then xNextTaskUnblockTime
;;;2518   		might be set to the blocked task's time out time.  If the task is
;;;2519   		unblocked for a reason other than a timeout xNextTaskUnblockTime is
;;;2520   		normally left unchanged, because it is automatically reset to a new
;;;2521   		value when the tick count equals xNextTaskUnblockTime.  However if
;;;2522   		tickless idling is used it might be more important to enter sleep mode
;;;2523   		at the earliest possible time - so reset xNextTaskUnblockTime here to
;;;2524   		ensure it is updated at the earliest possible time. */
;;;2525   		prvResetNextTaskUnblockTime();
;;;2526   	}
;;;2527   	#endif
;;;2528   
;;;2529   	return xReturn;
000064  4628              MOV      r0,r5
;;;2530   }
000066  bd70              POP      {r4-r6,pc}
;;;2531   /*-----------------------------------------------------------*/
                          ENDP

                  |L33.104|
                          DCD      uxSchedulerSuspended
                  |L33.108|
                          DCD      uxTopReadyPriority
                  |L33.112|
                          DCD      pxReadyTasksLists
                  |L33.116|
                          DCD      xPendingReadyList
                  |L33.120|
                          DCD      pxCurrentTCB
                  |L33.124|
                          DCD      xYieldPending

                          AREA ||i.xTaskRemoveFromUnorderedEventList||, CODE, READONLY, ALIGN=2

                  xTaskRemoveFromUnorderedEventList PROC
;;;2532   
;;;2533   BaseType_t xTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;2534   {
000004  4605              MOV      r5,r0
000006  460f              MOV      r7,r1
;;;2535   TCB_t *pxUnblockedTCB;
;;;2536   BaseType_t xReturn;
;;;2537   
;;;2538   	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
;;;2539   	the event flags implementation. */
;;;2540   	configASSERT( uxSchedulerSuspended != pdFALSE );
;;;2541   
;;;2542   	/* Store the new item value in the event list. */
;;;2543   	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
000008  f0474000          ORR      r0,r7,#0x80000000
00000c  6028              STR      r0,[r5,#0]
;;;2544   
;;;2545   	/* Remove the event list form the event flag.  Interrupts do not access
;;;2546   	event flags. */
;;;2547   	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
00000e  68ec              LDR      r4,[r5,#0xc]
;;;2548   	configASSERT( pxUnblockedTCB );
;;;2549   	( void ) uxListRemove( pxEventListItem );
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       uxListRemove
;;;2550   
;;;2551   	/* Remove the task from the delayed list and add it to the ready list.  The
;;;2552   	scheduler is suspended so interrupts will not be accessing the ready
;;;2553   	lists. */
;;;2554   	( void ) uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
000016  1d20              ADDS     r0,r4,#4
000018  f7fffffe          BL       uxListRemove
;;;2555   	prvAddTaskToReadyList( pxUnblockedTCB );
00001c  f894102c          LDRB     r1,[r4,#0x2c]
000020  2001              MOVS     r0,#1
000022  4088              LSLS     r0,r0,r1
000024  490e              LDR      r1,|L34.96|
000026  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000028  4308              ORRS     r0,r0,r1
00002a  490d              LDR      r1,|L34.96|
00002c  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00002e  6ae1              LDR      r1,[r4,#0x2c]
000030  eb010181          ADD      r1,r1,r1,LSL #2
000034  4a0b              LDR      r2,|L34.100|
000036  eb020081          ADD      r0,r2,r1,LSL #2
00003a  1d21              ADDS     r1,r4,#4
00003c  f7fffffe          BL       vListInsertEnd
;;;2556   
;;;2557   	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
000040  4909              LDR      r1,|L34.104|
000042  6ae0              LDR      r0,[r4,#0x2c]
000044  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000046  6ac9              LDR      r1,[r1,#0x2c]
000048  4288              CMP      r0,r1
00004a  d904              BLS      |L34.86|
;;;2558   	{
;;;2559   		/* Return true if the task removed from the event list has
;;;2560   		a higher priority than the calling task.  This allows
;;;2561   		the calling task to know if it should force a context
;;;2562   		switch now. */
;;;2563   		xReturn = pdTRUE;
00004c  2601              MOVS     r6,#1
;;;2564   
;;;2565   		/* Mark that a yield is pending in case the user is not using the
;;;2566   		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
;;;2567   		xYieldPending = pdTRUE;
00004e  2001              MOVS     r0,#1
000050  4906              LDR      r1,|L34.108|
000052  6008              STR      r0,[r1,#0]  ; xYieldPending
000054  e000              B        |L34.88|
                  |L34.86|
;;;2568   	}
;;;2569   	else
;;;2570   	{
;;;2571   		xReturn = pdFALSE;
000056  2600              MOVS     r6,#0
                  |L34.88|
;;;2572   	}
;;;2573   
;;;2574   	return xReturn;
000058  4630              MOV      r0,r6
;;;2575   }
00005a  e8bd81f0          POP      {r4-r8,pc}
;;;2576   /*-----------------------------------------------------------*/
                          ENDP

00005e  0000              DCW      0x0000
                  |L34.96|
                          DCD      uxTopReadyPriority
                  |L34.100|
                          DCD      pxReadyTasksLists
                  |L34.104|
                          DCD      pxCurrentTCB
                  |L34.108|
                          DCD      xYieldPending

                          AREA ||i.xTaskResumeAll||, CODE, READONLY, ALIGN=2

                  xTaskResumeAll PROC
;;;1670   
;;;1671   BaseType_t xTaskResumeAll( void )
000000  b570              PUSH     {r4-r6,lr}
;;;1672   {
;;;1673   TCB_t *pxTCB;
;;;1674   BaseType_t xAlreadyYielded = pdFALSE;
000002  2500              MOVS     r5,#0
;;;1675   
;;;1676   	/* If uxSchedulerSuspended is zero then this function does not match a
;;;1677   	previous call to vTaskSuspendAll(). */
;;;1678   	configASSERT( uxSchedulerSuspended );
;;;1679   
;;;1680   	/* It is possible that an ISR caused a task to be removed from an event
;;;1681   	list while the scheduler was suspended.  If this was the case then the
;;;1682   	removed task will have been added to the xPendingReadyList.  Once the
;;;1683   	scheduler has been resumed it is safe to move all the pending ready
;;;1684   	tasks from this list into their appropriate ready list. */
;;;1685   	taskENTER_CRITICAL();
000004  f7fffffe          BL       vPortEnterCritical
;;;1686   	{
;;;1687   		--uxSchedulerSuspended;
000008  482c              LDR      r0,|L35.188|
00000a  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
00000c  1e40              SUBS     r0,r0,#1
00000e  492b              LDR      r1,|L35.188|
000010  6008              STR      r0,[r1,#0]  ; uxSchedulerSuspended
;;;1688   
;;;1689   		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
000012  4608              MOV      r0,r1
000014  6800              LDR      r0,[r0,#0]  ; uxSchedulerSuspended
000016  2800              CMP      r0,#0
000018  d14b              BNE      |L35.178|
;;;1690   		{
;;;1691   			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
00001a  4829              LDR      r0,|L35.192|
00001c  6800              LDR      r0,[r0,#0]  ; uxCurrentNumberOfTasks
00001e  2800              CMP      r0,#0
000020  d047              BEQ      |L35.178|
;;;1692   			{
;;;1693   				/* Move any readied tasks from the pending list into the
;;;1694   				appropriate ready list. */
;;;1695   				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
000022  e024              B        |L35.110|
                  |L35.36|
;;;1696   				{
;;;1697   					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
000024  4827              LDR      r0,|L35.196|
000026  68c0              LDR      r0,[r0,#0xc]
000028  68c4              LDR      r4,[r0,#0xc]
;;;1698   					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
00002a  f1040018          ADD      r0,r4,#0x18
00002e  f7fffffe          BL       uxListRemove
;;;1699   					( void ) uxListRemove( &( pxTCB->xGenericListItem ) );
000032  1d20              ADDS     r0,r4,#4
000034  f7fffffe          BL       uxListRemove
;;;1700   					prvAddTaskToReadyList( pxTCB );
000038  f894102c          LDRB     r1,[r4,#0x2c]
00003c  2001              MOVS     r0,#1
00003e  4088              LSLS     r0,r0,r1
000040  4921              LDR      r1,|L35.200|
000042  6809              LDR      r1,[r1,#0]  ; uxTopReadyPriority
000044  4308              ORRS     r0,r0,r1
000046  4920              LDR      r1,|L35.200|
000048  6008              STR      r0,[r1,#0]  ; uxTopReadyPriority
00004a  6ae1              LDR      r1,[r4,#0x2c]
00004c  eb010181          ADD      r1,r1,r1,LSL #2
000050  4a1e              LDR      r2,|L35.204|
000052  eb020081          ADD      r0,r2,r1,LSL #2
000056  1d21              ADDS     r1,r4,#4
000058  f7fffffe          BL       vListInsertEnd
;;;1701   
;;;1702   					/* If the moved task has a priority higher than the current
;;;1703   					task then a yield must be performed. */
;;;1704   					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
00005c  491c              LDR      r1,|L35.208|
00005e  6ae0              LDR      r0,[r4,#0x2c]
000060  6809              LDR      r1,[r1,#0]  ; pxCurrentTCB
000062  6ac9              LDR      r1,[r1,#0x2c]
000064  4288              CMP      r0,r1
000066  d302              BCC      |L35.110|
;;;1705   					{
;;;1706   						xYieldPending = pdTRUE;
000068  2001              MOVS     r0,#1
00006a  491a              LDR      r1,|L35.212|
00006c  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L35.110|
00006e  4815              LDR      r0,|L35.196|
000070  6800              LDR      r0,[r0,#0]            ;1695  ; xPendingReadyList
000072  b908              CBNZ     r0,|L35.120|
000074  2001              MOVS     r0,#1                 ;1695
000076  e000              B        |L35.122|
                  |L35.120|
000078  2000              MOVS     r0,#0                 ;1695
                  |L35.122|
00007a  2800              CMP      r0,#0                 ;1695
00007c  d0d2              BEQ      |L35.36|
;;;1707   					}
;;;1708   					else
;;;1709   					{
;;;1710   						mtCOVERAGE_TEST_MARKER();
;;;1711   					}
;;;1712   				}
;;;1713   
;;;1714   				/* If any ticks occurred while the scheduler was suspended then
;;;1715   				they should be processed now.  This ensures the tick count does
;;;1716   				not	slip, and that any delayed tasks are resumed at the correct
;;;1717   				time. */
;;;1718   				if( uxPendedTicks > ( UBaseType_t ) 0U )
00007e  4816              LDR      r0,|L35.216|
000080  6800              LDR      r0,[r0,#0]  ; uxPendedTicks
000082  b178              CBZ      r0,|L35.164|
;;;1719   				{
;;;1720   					while( uxPendedTicks > ( UBaseType_t ) 0U )
000084  e00a              B        |L35.156|
                  |L35.134|
;;;1721   					{
;;;1722   						if( xTaskIncrementTick() != pdFALSE )
000086  f7fffffe          BL       xTaskIncrementTick
00008a  b110              CBZ      r0,|L35.146|
;;;1723   						{
;;;1724   							xYieldPending = pdTRUE;
00008c  2001              MOVS     r0,#1
00008e  4911              LDR      r1,|L35.212|
000090  6008              STR      r0,[r1,#0]  ; xYieldPending
                  |L35.146|
;;;1725   						}
;;;1726   						else
;;;1727   						{
;;;1728   							mtCOVERAGE_TEST_MARKER();
;;;1729   						}
;;;1730   						--uxPendedTicks;
000092  4811              LDR      r0,|L35.216|
000094  6800              LDR      r0,[r0,#0]  ; uxPendedTicks
000096  1e40              SUBS     r0,r0,#1
000098  490f              LDR      r1,|L35.216|
00009a  6008              STR      r0,[r1,#0]  ; uxPendedTicks
                  |L35.156|
00009c  480e              LDR      r0,|L35.216|
00009e  6800              LDR      r0,[r0,#0]            ;1720  ; uxPendedTicks
0000a0  2800              CMP      r0,#0                 ;1720
0000a2  d1f0              BNE      |L35.134|
                  |L35.164|
;;;1731   					}
;;;1732   				}
;;;1733   				else
;;;1734   				{
;;;1735   					mtCOVERAGE_TEST_MARKER();
;;;1736   				}
;;;1737   
;;;1738   				if( xYieldPending == pdTRUE )
0000a4  480b              LDR      r0,|L35.212|
0000a6  6800              LDR      r0,[r0,#0]  ; xYieldPending
0000a8  2801              CMP      r0,#1
0000aa  d102              BNE      |L35.178|
;;;1739   				{
;;;1740   					#if( configUSE_PREEMPTION != 0 )
;;;1741   					{
;;;1742   						xAlreadyYielded = pdTRUE;
0000ac  2501              MOVS     r5,#1
;;;1743   					}
;;;1744   					#endif
;;;1745   					taskYIELD_IF_USING_PREEMPTION();
0000ae  f7fffffe          BL       vPortYield
                  |L35.178|
;;;1746   				}
;;;1747   				else
;;;1748   				{
;;;1749   					mtCOVERAGE_TEST_MARKER();
;;;1750   				}
;;;1751   			}
;;;1752   		}
;;;1753   		else
;;;1754   		{
;;;1755   			mtCOVERAGE_TEST_MARKER();
;;;1756   		}
;;;1757   	}
;;;1758   	taskEXIT_CRITICAL();
0000b2  f7fffffe          BL       vPortExitCritical
;;;1759   
;;;1760   	return xAlreadyYielded;
0000b6  4628              MOV      r0,r5
;;;1761   }
0000b8  bd70              POP      {r4-r6,pc}
;;;1762   /*-----------------------------------------------------------*/
                          ENDP

0000ba  0000              DCW      0x0000
                  |L35.188|
                          DCD      uxSchedulerSuspended
                  |L35.192|
                          DCD      uxCurrentNumberOfTasks
                  |L35.196|
                          DCD      xPendingReadyList
                  |L35.200|
                          DCD      uxTopReadyPriority
                  |L35.204|
                          DCD      pxReadyTasksLists
                  |L35.208|
                          DCD      pxCurrentTCB
                  |L35.212|
                          DCD      xYieldPending
                  |L35.216|
                          DCD      uxPendedTicks

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pxReadyTasksLists
                          %        100
                  xDelayedTaskList1
                          %        20
                  xDelayedTaskList2
                          %        20
                  xPendingReadyList
                          %        20
                  xTasksWaitingTermination
                          %        20

                          AREA ||.data||, DATA, ALIGN=2

                  pxCurrentTCB
                          DCD      0x00000000
                  pxDelayedTaskList
                          DCD      0x00000000
                  pxOverflowDelayedTaskList
                          DCD      0x00000000
                  uxTasksDeleted
                          DCD      0x00000000
                  uxCurrentNumberOfTasks
                          DCD      0x00000000
                  xTickCount
                          DCD      0x00000000
                  uxTopReadyPriority
                          DCD      0x00000000
                  xSchedulerRunning
                          DCD      0x00000000
                  uxPendedTicks
                          DCD      0x00000000
                  xYieldPending
                          DCD      0x00000000
                  xNumOfOverflows
                          DCD      0x00000000
                  uxTaskNumber
                          DCD      0x00000000
                  xNextTaskUnblockTime
                          DCD      0x00000000
                  uxSchedulerSuspended
                          DCD      0x00000000
