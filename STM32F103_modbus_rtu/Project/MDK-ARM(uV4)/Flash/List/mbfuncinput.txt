; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\mbfuncinput.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mbfuncinput.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I..\..\User\FreeRTOS\Source\include -I..\..\User\FreeRTOS\Source\portable\MemMang -I..\..\User\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\..\User\FreeModbus-V1.5\include -I..\..\User\FreeModbus-V1.5\STM32F103-PORT -I..\..\User\FreeModbus-V1.5\BARE\port -I..\..\User\FreeModbus-V1.5\rtu -IE:\woosiyuan\smarthome\stm32f10x\STM32F103_modbus_rtu\Project\MDK-ARM(uV4)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mbfuncinput.crf ..\..\User\FreeModbus-V1.5\functions\mbfuncinput.c]
                          THUMB

                          AREA ||i.eMBFuncReadInputRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncReadInputRegister PROC
;;;58     eMBException
;;;59     eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;60     {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;61         USHORT          usRegAddress;
;;;62         USHORT          usRegCount;
;;;63         UCHAR          *pucFrameCur;
;;;64     
;;;65         eMBException    eStatus = MB_EX_NONE;
000008  f04f0a00          MOV      r10,#0
;;;66         eMBErrorCode    eRegStatus;
;;;67     
;;;68         if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
00000c  8820              LDRH     r0,[r4,#0]
00000e  2805              CMP      r0,#5
000010  d137              BNE      |L1.130|
;;;69         {
;;;70             usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
000012  7868              LDRB     r0,[r5,#1]
000014  ea4f2800          LSL      r8,r0,#8
;;;71             usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
000018  78a8              LDRB     r0,[r5,#2]
00001a  ea400808          ORR      r8,r0,r8
;;;72             usRegAddress++;
00001e  f1080001          ADD      r0,r8,#1
000022  fa1ff880          UXTH     r8,r0
;;;73     
;;;74             usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
000026  78e8              LDRB     r0,[r5,#3]
000028  0206              LSLS     r6,r0,#8
;;;75             usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
00002a  7928              LDRB     r0,[r5,#4]
00002c  4306              ORRS     r6,r6,r0
;;;76     
;;;77             /* Check if the number of registers to read is valid. If not
;;;78              * return Modbus illegal data value exception. 
;;;79              */
;;;80             if( ( usRegCount >= 1 )
00002e  2e01              CMP      r6,#1
000030  db24              BLT      |L1.124|
;;;81                 && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
000032  2e7d              CMP      r6,#0x7d
000034  da22              BGE      |L1.124|
;;;82             {
;;;83                 /* Set the current PDU data pointer to the beginning. */
;;;84                 pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
000036  462f              MOV      r7,r5
;;;85                 *usLen = MB_PDU_FUNC_OFF;
000038  2000              MOVS     r0,#0
00003a  8020              STRH     r0,[r4,#0]
;;;86     
;;;87                 /* First byte contains the function code. */
;;;88                 *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
00003c  2004              MOVS     r0,#4
00003e  f8070b01          STRB     r0,[r7],#1
;;;89                 *usLen += 1;
000042  8820              LDRH     r0,[r4,#0]
000044  1c40              ADDS     r0,r0,#1
000046  8020              STRH     r0,[r4,#0]
;;;90     
;;;91                 /* Second byte in the response contain the number of bytes. */
;;;92                 *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
000048  0670              LSLS     r0,r6,#25
00004a  0e00              LSRS     r0,r0,#24
00004c  f8070b01          STRB     r0,[r7],#1
;;;93                 *usLen += 1;
000050  8820              LDRH     r0,[r4,#0]
000052  1c40              ADDS     r0,r0,#1
000054  8020              STRH     r0,[r4,#0]
;;;94     
;;;95                 eRegStatus =
000056  4632              MOV      r2,r6
000058  4641              MOV      r1,r8
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       eMBRegInputCB
000060  4681              MOV      r9,r0
;;;96                     eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
;;;97     
;;;98                 /* If an error occured convert it into a Modbus exception. */
;;;99                 if( eRegStatus != MB_ENOERR )
000062  f1b90f00          CMP      r9,#0
000066  d004              BEQ      |L1.114|
;;;100                {
;;;101                    eStatus = prveMBError2Exception( eRegStatus );
000068  4648              MOV      r0,r9
00006a  f7fffffe          BL       prveMBError2Exception
00006e  4682              MOV      r10,r0
000070  e009              B        |L1.134|
                  |L1.114|
;;;102                }
;;;103                else
;;;104                {
;;;105                    *usLen += usRegCount * 2;
000072  8820              LDRH     r0,[r4,#0]
000074  eb000046          ADD      r0,r0,r6,LSL #1
000078  8020              STRH     r0,[r4,#0]
00007a  e004              B        |L1.134|
                  |L1.124|
;;;106                }
;;;107            }
;;;108            else
;;;109            {
;;;110                eStatus = MB_EX_ILLEGAL_DATA_VALUE;
00007c  f04f0a03          MOV      r10,#3
000080  e001              B        |L1.134|
                  |L1.130|
;;;111            }
;;;112        }
;;;113        else
;;;114        {
;;;115            /* Can't be a valid read input register request because the length
;;;116             * is incorrect. */
;;;117            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
000082  f04f0a03          MOV      r10,#3
                  |L1.134|
;;;118        }
;;;119        return eStatus;
000086  4650              MOV      r0,r10
;;;120    }
000088  e8bd87f0          POP      {r4-r10,pc}
;;;121    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\FreeModbus-V1.5\\functions\\mbfuncinput.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_mbfuncinput_c_35de6167____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_mbfuncinput_c_35de6167____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_mbfuncinput_c_35de6167____REVSH|
#line 128
|__asm___13_mbfuncinput_c_35de6167____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
