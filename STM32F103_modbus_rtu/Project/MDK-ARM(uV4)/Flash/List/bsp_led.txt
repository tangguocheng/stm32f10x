; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_led.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_led.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I..\..\User\FreeRTOS\Source\include -I..\..\User\FreeRTOS\Source\portable\MemMang -I..\..\User\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\..\User\FreeModbus-V1.5\include -I..\..\User\FreeModbus-V1.5\STM32F103-PORT -I..\..\User\FreeModbus-V1.5\BARE\port -I..\..\User\FreeModbus-V1.5\rtu -IE:\woosiyuan\smarthome\stm32f10x\STM32F103_modbus_rtu\Project\MDK-ARM(uV4)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_led.crf ..\..\User\bsp\src\bsp_led.c]
                          THUMB

                          AREA ||i.bsp_InitLed||, CODE, READONLY, ALIGN=2

                  bsp_InitLed PROC
;;;55     */
;;;56     void bsp_InitLed(void)
000000  b508              PUSH     {r3,lr}
;;;57     {
;;;58     	GPIO_InitTypeDef GPIO_InitStructure;
;;;59     
;;;60     	/* 打开GPIO时钟 */
;;;61     	RCC_APB2PeriphClockCmd(RCC_ALL_LED, ENABLE);
000002  2101              MOVS     r1,#1
000004  0208              LSLS     r0,r1,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;62     
;;;63     	/*
;;;64     		配置所有的LED指示灯GPIO为推挽输出模式
;;;65     		由于将GPIO设置为输出时，GPIO输出寄存器的值缺省是0，因此会驱动LED点亮.
;;;66     		这是我不希望的，因此在改变GPIO为输出前，先关闭LED指示灯
;;;67     	*/
;;;68     	bsp_LedOff(1);
00000a  2001              MOVS     r0,#1
00000c  f7fffffe          BL       bsp_LedOff
;;;69     	
;;;70     		/*
;;;71     			GXP,ADD,屏蔽,因为我用的M3板子上的LED灯是PG13，2016年5月27日16:11:26
;;;72     			*/
;;;73     // 	bsp_LedOff(2);
;;;74     // 	bsp_LedOff(3);
;;;75     // 	bsp_LedOff(4);
;;;76     
;;;77     	
;;;78     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000010  2003              MOVS     r0,#3
000012  f88d0002          STRB     r0,[sp,#2]
;;;79     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000016  2010              MOVS     r0,#0x10
000018  f88d0003          STRB     r0,[sp,#3]
;;;80     	
;;;81     	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED1;
00001c  0240              LSLS     r0,r0,#9
00001e  f8ad0000          STRH     r0,[sp,#0]
;;;82     	GPIO_Init(GPIO_PORT_LED1, &GPIO_InitStructure);
000022  4669              MOV      r1,sp
000024  4801              LDR      r0,|L1.44|
000026  f7fffffe          BL       GPIO_Init
;;;83     
;;;84     		/*
;;;85     			GXP,ADD,屏蔽,因为我用的M3板子上的LED灯是PG13，2016年5月27日16:11:26
;;;86     			*/
;;;87     			
;;;88     // 	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED2;
;;;89     // 	GPIO_Init(GPIO_PORT_LED2, &GPIO_InitStructure);
;;;90     
;;;91     // 	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED3;
;;;92     // 	GPIO_Init(GPIO_PORT_LED3, &GPIO_InitStructure);
;;;93     
;;;94     // 	GPIO_InitStructure.GPIO_Pin = GPIO_PIN_LED4;
;;;95     // 	GPIO_Init(GPIO_PORT_LED4, &GPIO_InitStructure);
;;;96     }
00002a  bd08              POP      {r3,pc}
;;;97     
                          ENDP

                  |L1.44|
                          DCD      0x40012000

                          AREA ||i.bsp_IsLedOn||, CODE, READONLY, ALIGN=2

                  bsp_IsLedOn PROC
;;;193    */
;;;194    uint8_t bsp_IsLedOn(uint8_t _no)
000000  4601              MOV      r1,r0
;;;195    {
;;;196    	if (_no == 1)
000002  2901              CMP      r1,#1
000004  d108              BNE      |L2.24|
;;;197    	{
;;;198    		if ((GPIO_PORT_LED1->ODR & GPIO_PIN_LED1) == 0)
000006  4816              LDR      r0,|L2.96|
000008  68c0              LDR      r0,[r0,#0xc]
00000a  f4005000          AND      r0,r0,#0x2000
00000e  b908              CBNZ     r0,|L2.20|
;;;199    		{
;;;200    			return 1;
000010  2001              MOVS     r0,#1
                  |L2.18|
;;;201    		}
;;;202    		return 0;
;;;203    	}
;;;204    	else if (_no == 2)
;;;205    	{
;;;206    		if ((GPIO_PORT_LED2->ODR & GPIO_PIN_LED2) == 0)
;;;207    		{
;;;208    			return 1;
;;;209    		}
;;;210    		return 0;
;;;211    	}
;;;212    	else if (_no == 3)
;;;213    	{
;;;214    		if ((GPIO_PORT_LED3->ODR & GPIO_PIN_LED3) == 0)
;;;215    		{
;;;216    			return 1;
;;;217    		}
;;;218    		return 0;
;;;219    	}
;;;220    	else if (_no == 4)
;;;221    	{
;;;222    		if ((GPIO_PORT_LED4->ODR & GPIO_PIN_LED4) == 0)
;;;223    		{
;;;224    			return 1;
;;;225    		}
;;;226    		return 0;
;;;227    	}
;;;228    
;;;229    	return 0;
;;;230    }
000012  4770              BX       lr
                  |L2.20|
000014  2000              MOVS     r0,#0                 ;202
000016  e7fc              B        |L2.18|
                  |L2.24|
000018  2902              CMP      r1,#2                 ;204
00001a  d108              BNE      |L2.46|
00001c  4811              LDR      r0,|L2.100|
00001e  6800              LDR      r0,[r0,#0]            ;206
000020  f0000080          AND      r0,r0,#0x80           ;206
000024  b908              CBNZ     r0,|L2.42|
000026  2001              MOVS     r0,#1                 ;208
000028  e7f3              B        |L2.18|
                  |L2.42|
00002a  2000              MOVS     r0,#0                 ;210
00002c  e7f1              B        |L2.18|
                  |L2.46|
00002e  2903              CMP      r1,#3                 ;212
000030  d108              BNE      |L2.68|
000032  480c              LDR      r0,|L2.100|
000034  6800              LDR      r0,[r0,#0]            ;214
000036  f4007080          AND      r0,r0,#0x100          ;214
00003a  b908              CBNZ     r0,|L2.64|
00003c  2001              MOVS     r0,#1                 ;216
00003e  e7e8              B        |L2.18|
                  |L2.64|
000040  2000              MOVS     r0,#0                 ;218
000042  e7e6              B        |L2.18|
                  |L2.68|
000044  2904              CMP      r1,#4                 ;220
000046  d108              BNE      |L2.90|
000048  4806              LDR      r0,|L2.100|
00004a  6800              LDR      r0,[r0,#0]            ;222
00004c  f4007000          AND      r0,r0,#0x200          ;222
000050  b908              CBNZ     r0,|L2.86|
000052  2001              MOVS     r0,#1                 ;224
000054  e7dd              B        |L2.18|
                  |L2.86|
000056  2000              MOVS     r0,#0                 ;226
000058  e7db              B        |L2.18|
                  |L2.90|
00005a  2000              MOVS     r0,#0                 ;229
00005c  e7d9              B        |L2.18|
;;;231    
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      0x40012000
                  |L2.100|
                          DCD      0x40011c0c

                          AREA ||i.bsp_LedOff||, CODE, READONLY, ALIGN=2

                  bsp_LedOff PROC
;;;135    */
;;;136    void bsp_LedOff(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;137    {
;;;138    	_no--;
000002  b2c8              UXTB     r0,r1
;;;139    
;;;140    	if (_no == 0)
000004  b920              CBNZ     r0,|L3.16|
;;;141    	{
;;;142    		GPIO_PORT_LED1->BSRR = GPIO_PIN_LED1;
000006  f44f5100          MOV      r1,#0x2000
00000a  4a0b              LDR      r2,|L3.56|
00000c  6111              STR      r1,[r2,#0x10]
00000e  e011              B        |L3.52|
                  |L3.16|
;;;143    	}
;;;144    	else if (_no == 1)
000010  2801              CMP      r0,#1
000012  d103              BNE      |L3.28|
;;;145    	{
;;;146    		GPIO_PORT_LED2->BSRR = GPIO_PIN_LED2;
000014  2180              MOVS     r1,#0x80
000016  4a09              LDR      r2,|L3.60|
000018  6011              STR      r1,[r2,#0]
00001a  e00b              B        |L3.52|
                  |L3.28|
;;;147    	}
;;;148    	else if (_no == 2)
00001c  2802              CMP      r0,#2
00001e  d103              BNE      |L3.40|
;;;149    	{
;;;150    		GPIO_PORT_LED3->BSRR = GPIO_PIN_LED3;
000020  01c1              LSLS     r1,r0,#7
000022  4a06              LDR      r2,|L3.60|
000024  6011              STR      r1,[r2,#0]
000026  e005              B        |L3.52|
                  |L3.40|
;;;151    	}
;;;152    	else if (_no == 3)
000028  2803              CMP      r0,#3
00002a  d103              BNE      |L3.52|
;;;153    	{
;;;154    		GPIO_PORT_LED4->BSRR = GPIO_PIN_LED4;
00002c  f44f7100          MOV      r1,#0x200
000030  4a02              LDR      r2,|L3.60|
000032  6011              STR      r1,[r2,#0]
                  |L3.52|
;;;155    	}
;;;156    }
000034  4770              BX       lr
;;;157    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      0x40012000
                  |L3.60|
                          DCD      0x40011c10

                          AREA ||i.bsp_LedOn||, CODE, READONLY, ALIGN=2

                  bsp_LedOn PROC
;;;105    */
;;;106    void bsp_LedOn(uint8_t _no)
000000  1e41              SUBS     r1,r0,#1
;;;107    {
;;;108    	_no--;
000002  b2c8              UXTB     r0,r1
;;;109    
;;;110    	if (_no == 0)
000004  b920              CBNZ     r0,|L4.16|
;;;111    	{
;;;112    		GPIO_PORT_LED1->BRR = GPIO_PIN_LED1;
000006  f44f5100          MOV      r1,#0x2000
00000a  4a0b              LDR      r2,|L4.56|
00000c  6151              STR      r1,[r2,#0x14]
00000e  e011              B        |L4.52|
                  |L4.16|
;;;113    	}
;;;114    	else if (_no == 1)
000010  2801              CMP      r0,#1
000012  d103              BNE      |L4.28|
;;;115    	{
;;;116    		GPIO_PORT_LED2->BRR = GPIO_PIN_LED2;
000014  2180              MOVS     r1,#0x80
000016  4a09              LDR      r2,|L4.60|
000018  6011              STR      r1,[r2,#0]
00001a  e00b              B        |L4.52|
                  |L4.28|
;;;117    	}
;;;118    	else if (_no == 2)
00001c  2802              CMP      r0,#2
00001e  d103              BNE      |L4.40|
;;;119    	{
;;;120    		GPIO_PORT_LED3->BRR = GPIO_PIN_LED3;
000020  01c1              LSLS     r1,r0,#7
000022  4a06              LDR      r2,|L4.60|
000024  6011              STR      r1,[r2,#0]
000026  e005              B        |L4.52|
                  |L4.40|
;;;121    	}
;;;122    	else if (_no == 3)
000028  2803              CMP      r0,#3
00002a  d103              BNE      |L4.52|
;;;123    	{
;;;124    		GPIO_PORT_LED4->BRR = GPIO_PIN_LED4;
00002c  f44f7100          MOV      r1,#0x200
000030  4a02              LDR      r2,|L4.60|
000032  6011              STR      r1,[r2,#0]
                  |L4.52|
;;;125    	}
;;;126    }
000034  4770              BX       lr
;;;127    
                          ENDP

000036  0000              DCW      0x0000
                  |L4.56|
                          DCD      0x40012000
                  |L4.60|
                          DCD      0x40011c14

                          AREA ||i.bsp_LedToggle||, CODE, READONLY, ALIGN=2

                  bsp_LedToggle PROC
;;;165    */
;;;166    void bsp_LedToggle(uint8_t _no)
000000  2801              CMP      r0,#1
;;;167    {
;;;168    	if (_no == 1)
000002  d106              BNE      |L5.18|
;;;169    	{
;;;170    		GPIO_PORT_LED1->ODR ^= GPIO_PIN_LED1;
000004  4910              LDR      r1,|L5.72|
000006  68c9              LDR      r1,[r1,#0xc]
000008  f4815100          EOR      r1,r1,#0x2000
00000c  4a0e              LDR      r2,|L5.72|
00000e  60d1              STR      r1,[r2,#0xc]
000010  e019              B        |L5.70|
                  |L5.18|
;;;171    	}
;;;172    	else if (_no == 2)
000012  2802              CMP      r0,#2
000014  d106              BNE      |L5.36|
;;;173    	{
;;;174    		GPIO_PORT_LED2->ODR ^= GPIO_PIN_LED2;
000016  490d              LDR      r1,|L5.76|
000018  6809              LDR      r1,[r1,#0]
00001a  f0810180          EOR      r1,r1,#0x80
00001e  4a0b              LDR      r2,|L5.76|
000020  6011              STR      r1,[r2,#0]
000022  e010              B        |L5.70|
                  |L5.36|
;;;175    	}
;;;176    	else if (_no == 3)
000024  2803              CMP      r0,#3
000026  d106              BNE      |L5.54|
;;;177    	{
;;;178    		GPIO_PORT_LED3->ODR ^= GPIO_PIN_LED3;
000028  4908              LDR      r1,|L5.76|
00002a  6809              LDR      r1,[r1,#0]
00002c  f4817180          EOR      r1,r1,#0x100
000030  4a06              LDR      r2,|L5.76|
000032  6011              STR      r1,[r2,#0]
000034  e007              B        |L5.70|
                  |L5.54|
;;;179    	}
;;;180    	else if (_no == 4)
000036  2804              CMP      r0,#4
000038  d105              BNE      |L5.70|
;;;181    	{
;;;182    		GPIO_PORT_LED4->ODR ^= GPIO_PIN_LED4;
00003a  4904              LDR      r1,|L5.76|
00003c  6809              LDR      r1,[r1,#0]
00003e  f4817100          EOR      r1,r1,#0x200
000042  4a02              LDR      r2,|L5.76|
000044  6011              STR      r1,[r2,#0]
                  |L5.70|
;;;183    	}
;;;184    }
000046  4770              BX       lr
;;;185    
                          ENDP

                  |L5.72|
                          DCD      0x40012000
                  |L5.76|
                          DCD      0x40011c0c

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_led.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___9_bsp_led_c_ba23b041____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_bsp_led_c_ba23b041____REVSH|
#line 128
|__asm___9_bsp_led_c_ba23b041____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
