; generated by Component: ARM Compiler 5.05 update 2 (build 169) Tool: ArmCC [4d0f38]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\mbfuncholding.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\mbfuncholding.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I..\..\User\FreeRTOS\Source\include -I..\..\User\FreeRTOS\Source\portable\MemMang -I..\..\User\FreeRTOS\Source\portable\RVDS\ARM_CM3 -I..\..\User\FreeModbus-V1.5\include -I..\..\User\FreeModbus-V1.5\STM32F103-PORT -I..\..\User\FreeModbus-V1.5\BARE\port -I..\..\User\FreeModbus-V1.5\rtu -IE:\woosiyuan\smarthome\stm32f10x\STM32F103_modbus_rtu\Project\MDK-ARM(uV4)\RTE -IC:\Keil_v5\ARM\PACK\ARM\CMSIS\5.0.1\CMSIS\Include -IC:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=515 -D_RTE_ -DSTM32F10X_HD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\mbfuncholding.crf ..\..\User\FreeModbus-V1.5\functions\mbfuncholding.c]
                          THUMB

                          AREA ||i.eMBFuncReadHoldingRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncReadHoldingRegister PROC
;;;169    eMBException
;;;170    eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;171    {
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;172        USHORT          usRegAddress;
;;;173        USHORT          usRegCount;
;;;174        UCHAR          *pucFrameCur;
;;;175    
;;;176        eMBException    eStatus = MB_EX_NONE;
000008  f04f0a00          MOV      r10,#0
;;;177        eMBErrorCode    eRegStatus;
;;;178    
;;;179        if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
00000c  8820              LDRH     r0,[r4,#0]
00000e  2805              CMP      r0,#5
000010  d137              BNE      |L1.130|
;;;180        {
;;;181            usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
000012  7868              LDRB     r0,[r5,#1]
000014  ea4f2800          LSL      r8,r0,#8
;;;182            usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
000018  78a8              LDRB     r0,[r5,#2]
00001a  ea400808          ORR      r8,r0,r8
;;;183            usRegAddress++;
00001e  f1080001          ADD      r0,r8,#1
000022  fa1ff880          UXTH     r8,r0
;;;184    
;;;185            usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
000026  78e8              LDRB     r0,[r5,#3]
000028  0206              LSLS     r6,r0,#8
;;;186            usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
00002a  792e              LDRB     r6,[r5,#4]
;;;187    
;;;188            /* Check if the number of registers to read is valid. If not
;;;189             * return Modbus illegal data value exception. 
;;;190             */
;;;191            if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
00002c  2e01              CMP      r6,#1
00002e  db25              BLT      |L1.124|
000030  2e7d              CMP      r6,#0x7d
000032  dc23              BGT      |L1.124|
;;;192            {
;;;193                /* Set the current PDU data pointer to the beginning. */
;;;194                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
000034  462f              MOV      r7,r5
;;;195                *usLen = MB_PDU_FUNC_OFF;
000036  2000              MOVS     r0,#0
000038  8020              STRH     r0,[r4,#0]
;;;196    
;;;197                /* First byte contains the function code. */
;;;198                *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
00003a  2003              MOVS     r0,#3
00003c  f8070b01          STRB     r0,[r7],#1
;;;199                *usLen += 1;
000040  8820              LDRH     r0,[r4,#0]
000042  1c40              ADDS     r0,r0,#1
000044  8020              STRH     r0,[r4,#0]
;;;200    
;;;201                /* Second byte in the response contain the number of bytes. */
;;;202                *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
000046  0670              LSLS     r0,r6,#25
000048  0e00              LSRS     r0,r0,#24
00004a  f8070b01          STRB     r0,[r7],#1
;;;203                *usLen += 1;
00004e  8820              LDRH     r0,[r4,#0]
000050  1c40              ADDS     r0,r0,#1
000052  8020              STRH     r0,[r4,#0]
;;;204    
;;;205                /* Make callback to fill the buffer. */
;;;206                eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
000054  2300              MOVS     r3,#0
000056  4632              MOV      r2,r6
000058  4641              MOV      r1,r8
00005a  4638              MOV      r0,r7
00005c  f7fffffe          BL       eMBRegHoldingCB
000060  4681              MOV      r9,r0
;;;207                /* If an error occured convert it into a Modbus exception. */
;;;208                if( eRegStatus != MB_ENOERR )
000062  f1b90f00          CMP      r9,#0
000066  d004              BEQ      |L1.114|
;;;209                {
;;;210                    eStatus = prveMBError2Exception( eRegStatus );
000068  4648              MOV      r0,r9
00006a  f7fffffe          BL       prveMBError2Exception
00006e  4682              MOV      r10,r0
000070  e009              B        |L1.134|
                  |L1.114|
;;;211                }
;;;212                else
;;;213                {
;;;214                    *usLen += usRegCount * 2;
000072  8820              LDRH     r0,[r4,#0]
000074  eb000046          ADD      r0,r0,r6,LSL #1
000078  8020              STRH     r0,[r4,#0]
00007a  e004              B        |L1.134|
                  |L1.124|
;;;215                }
;;;216            }
;;;217            else
;;;218            {
;;;219                eStatus = MB_EX_ILLEGAL_DATA_VALUE;
00007c  f04f0a03          MOV      r10,#3
000080  e001              B        |L1.134|
                  |L1.130|
;;;220            }
;;;221        }
;;;222        else
;;;223        {
;;;224            /* Can't be a valid request because the length is incorrect. */
;;;225            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
000082  f04f0a03          MOV      r10,#3
                  |L1.134|
;;;226        }
;;;227        return eStatus;
000086  4650              MOV      r0,r10
;;;228    }
000088  e8bd87f0          POP      {r4-r10,pc}
;;;229    
                          ENDP


                          AREA ||i.eMBFuncReadWriteMultipleHoldingRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncReadWriteMultipleHoldingRegister PROC
;;;234    eMBException
;;;235    eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
000000  e92d5ffc          PUSH     {r2-r12,lr}
;;;236    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;237        USHORT          usRegReadAddress;
;;;238        USHORT          usRegReadCount;
;;;239        USHORT          usRegWriteAddress;
;;;240        USHORT          usRegWriteCount;
;;;241        UCHAR           ucRegWriteByteCount;
;;;242        UCHAR          *pucFrameCur;
;;;243    
;;;244        eMBException    eStatus = MB_EX_NONE;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;245        eMBErrorCode    eRegStatus;
;;;246    
;;;247        if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
00000c  8828              LDRH     r0,[r5,#0]
00000e  280a              CMP      r0,#0xa
000010  db5d              BLT      |L2.206|
;;;248        {
;;;249            usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
000012  7860              LDRB     r0,[r4,#1]
000014  ea4f2a00          LSL      r10,r0,#8
;;;250            usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
000018  78a0              LDRB     r0,[r4,#2]
00001a  ea400a0a          ORR      r10,r0,r10
;;;251            usRegReadAddress++;
00001e  f10a0001          ADD      r0,r10,#1
000022  fa1ffa80          UXTH     r10,r0
;;;252    
;;;253            usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
000026  78e0              LDRB     r0,[r4,#3]
000028  0206              LSLS     r6,r0,#8
;;;254            usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
00002a  7920              LDRB     r0,[r4,#4]
00002c  4306              ORRS     r6,r6,r0
;;;255    
;;;256            usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
00002e  7960              LDRB     r0,[r4,#5]
000030  ea4f2b00          LSL      r11,r0,#8
;;;257            usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
000034  79a0              LDRB     r0,[r4,#6]
000036  ea400b0b          ORR      r11,r0,r11
;;;258            usRegWriteAddress++;
00003a  f10b0001          ADD      r0,r11,#1
00003e  fa1ffb80          UXTH     r11,r0
;;;259    
;;;260            usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
000042  79e0              LDRB     r0,[r4,#7]
000044  0207              LSLS     r7,r0,#8
;;;261            usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
000046  7a20              LDRB     r0,[r4,#8]
000048  4307              ORRS     r7,r7,r0
;;;262    
;;;263            ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
00004a  7a60              LDRB     r0,[r4,#9]
00004c  9001              STR      r0,[sp,#4]
;;;264    
;;;265            if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
00004e  2e01              CMP      r6,#1
000050  db3b              BLT      |L2.202|
000052  2e7d              CMP      r6,#0x7d
000054  dc39              BGT      |L2.202|
;;;266                ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
000056  2f01              CMP      r7,#1
000058  db37              BLT      |L2.202|
00005a  2f79              CMP      r7,#0x79
00005c  dc35              BGT      |L2.202|
;;;267                ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
00005e  0079              LSLS     r1,r7,#1
000060  9801              LDR      r0,[sp,#4]
000062  4281              CMP      r1,r0
000064  d131              BNE      |L2.202|
;;;268            {
;;;269                /* Make callback to update the register values. */
;;;270                eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
000066  2301              MOVS     r3,#1
000068  463a              MOV      r2,r7
00006a  4659              MOV      r1,r11
00006c  f104000a          ADD      r0,r4,#0xa
000070  f7fffffe          BL       eMBRegHoldingCB
000074  4681              MOV      r9,r0
;;;271                                              usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );
;;;272    
;;;273                if( eRegStatus == MB_ENOERR )
000076  f1b90f00          CMP      r9,#0
00007a  d11e              BNE      |L2.186|
;;;274                {
;;;275                    /* Set the current PDU data pointer to the beginning. */
;;;276                    pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
00007c  46a0              MOV      r8,r4
;;;277                    *usLen = MB_PDU_FUNC_OFF;
00007e  2000              MOVS     r0,#0
000080  8028              STRH     r0,[r5,#0]
;;;278    
;;;279                    /* First byte contains the function code. */
;;;280                    *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
000082  2017              MOVS     r0,#0x17
000084  f8080b01          STRB     r0,[r8],#1
;;;281                    *usLen += 1;
000088  8828              LDRH     r0,[r5,#0]
00008a  1c40              ADDS     r0,r0,#1
00008c  8028              STRH     r0,[r5,#0]
;;;282    
;;;283                    /* Second byte in the response contain the number of bytes. */
;;;284                    *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
00008e  0670              LSLS     r0,r6,#25
000090  0e00              LSRS     r0,r0,#24
000092  f8080b01          STRB     r0,[r8],#1
;;;285                    *usLen += 1;
000096  8828              LDRH     r0,[r5,#0]
000098  1c40              ADDS     r0,r0,#1
00009a  8028              STRH     r0,[r5,#0]
;;;286    
;;;287                    /* Make the read callback. */
;;;288                    eRegStatus =
00009c  2300              MOVS     r3,#0
00009e  4632              MOV      r2,r6
0000a0  4651              MOV      r1,r10
0000a2  4640              MOV      r0,r8
0000a4  f7fffffe          BL       eMBRegHoldingCB
0000a8  4681              MOV      r9,r0
;;;289                        eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
;;;290                    if( eRegStatus == MB_ENOERR )
0000aa  f1b90f00          CMP      r9,#0
0000ae  d104              BNE      |L2.186|
;;;291                    {
;;;292                        *usLen += 2 * usRegReadCount;
0000b0  8828              LDRH     r0,[r5,#0]
0000b2  2102              MOVS     r1,#2
0000b4  fb010006          MLA      r0,r1,r6,r0
0000b8  8028              STRH     r0,[r5,#0]
                  |L2.186|
;;;293                    }
;;;294                }
;;;295                if( eRegStatus != MB_ENOERR )
0000ba  f1b90f00          CMP      r9,#0
0000be  d006              BEQ      |L2.206|
;;;296                {
;;;297                    eStatus = prveMBError2Exception( eRegStatus );
0000c0  4648              MOV      r0,r9
0000c2  f7fffffe          BL       prveMBError2Exception
0000c6  9000              STR      r0,[sp,#0]
0000c8  e001              B        |L2.206|
                  |L2.202|
;;;298                }
;;;299            }
;;;300            else
;;;301            {
;;;302                eStatus = MB_EX_ILLEGAL_DATA_VALUE;
0000ca  2003              MOVS     r0,#3
0000cc  9000              STR      r0,[sp,#0]
                  |L2.206|
;;;303            }
;;;304        }
;;;305        return eStatus;
0000ce  9800              LDR      r0,[sp,#0]
;;;306    }
0000d0  e8bd9ffc          POP      {r2-r12,pc}
;;;307    
                          ENDP


                          AREA ||i.eMBFuncWriteHoldingRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncWriteHoldingRegister PROC
;;;76     eMBException
;;;77     eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;78     {
000004  4604              MOV      r4,r0
000006  460f              MOV      r7,r1
;;;79         USHORT          usRegAddress;
;;;80         eMBException    eStatus = MB_EX_NONE;
000008  f04f0800          MOV      r8,#0
;;;81         eMBErrorCode    eRegStatus;
;;;82     
;;;83         if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
00000c  8838              LDRH     r0,[r7,#0]
00000e  2805              CMP      r0,#5
000010  d112              BNE      |L3.56|
;;;84         {
;;;85             usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
000012  7860              LDRB     r0,[r4,#1]
000014  0205              LSLS     r5,r0,#8
;;;86             usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
000016  78a0              LDRB     r0,[r4,#2]
000018  4305              ORRS     r5,r5,r0
;;;87             usRegAddress++;
00001a  1c68              ADDS     r0,r5,#1
00001c  b285              UXTH     r5,r0
;;;88     
;;;89             /* Make callback to update the value. */
;;;90             eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
00001e  2301              MOVS     r3,#1
000020  461a              MOV      r2,r3
000022  4629              MOV      r1,r5
000024  1ce0              ADDS     r0,r4,#3
000026  f7fffffe          BL       eMBRegHoldingCB
00002a  4606              MOV      r6,r0
;;;91                                           usRegAddress, 1, MB_REG_WRITE );
;;;92     
;;;93             /* If an error occured convert it into a Modbus exception. */
;;;94             if( eRegStatus != MB_ENOERR )
00002c  b136              CBZ      r6,|L3.60|
;;;95             {
;;;96                 eStatus = prveMBError2Exception( eRegStatus );
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       prveMBError2Exception
000034  4680              MOV      r8,r0
000036  e001              B        |L3.60|
                  |L3.56|
;;;97             }
;;;98         }
;;;99         else
;;;100        {
;;;101            /* Can't be a valid request because the length is incorrect. */
;;;102            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
000038  f04f0803          MOV      r8,#3
                  |L3.60|
;;;103        }
;;;104        return eStatus;
00003c  4640              MOV      r0,r8
;;;105    }
00003e  e8bd81f0          POP      {r4-r8,pc}
;;;106    #endif
                          ENDP


                          AREA ||i.eMBFuncWriteMultipleHoldingRegister||, CODE, READONLY, ALIGN=1

                  eMBFuncWriteMultipleHoldingRegister PROC
;;;109    eMBException
;;;110    eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;111    {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
;;;112        USHORT          usRegAddress;
;;;113        USHORT          usRegCount;
;;;114        UCHAR           ucRegByteCount;
;;;115    
;;;116        eMBException    eStatus = MB_EX_NONE;
000008  f04f0a00          MOV      r10,#0
;;;117        eMBErrorCode    eRegStatus;
;;;118    
;;;119        if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
00000c  8830              LDRH     r0,[r6,#0]
00000e  2806              CMP      r0,#6
000010  db28              BLT      |L4.100|
;;;120        {
;;;121            usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
000012  7860              LDRB     r0,[r4,#1]
000014  0207              LSLS     r7,r0,#8
;;;122            usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
000016  78a0              LDRB     r0,[r4,#2]
000018  4307              ORRS     r7,r7,r0
;;;123            usRegAddress++;
00001a  1c78              ADDS     r0,r7,#1
00001c  b287              UXTH     r7,r0
;;;124    
;;;125            usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
00001e  78e0              LDRB     r0,[r4,#3]
000020  0205              LSLS     r5,r0,#8
;;;126            usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
000022  7920              LDRB     r0,[r4,#4]
000024  4305              ORRS     r5,r5,r0
;;;127    
;;;128            ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
000026  f8949005          LDRB     r9,[r4,#5]
;;;129    
;;;130            if( ( usRegCount >= 1 ) &&
00002a  2d01              CMP      r5,#1
00002c  db17              BLT      |L4.94|
;;;131                ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
00002e  2d78              CMP      r5,#0x78
000030  dc15              BGT      |L4.94|
;;;132                ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
000032  0668              LSLS     r0,r5,#25
000034  0e00              LSRS     r0,r0,#24
000036  4548              CMP      r0,r9
000038  d111              BNE      |L4.94|
;;;133            {
;;;134                /* Make callback to update the register values. */
;;;135                eRegStatus =
00003a  2301              MOVS     r3,#1
00003c  462a              MOV      r2,r5
00003e  4639              MOV      r1,r7
000040  1da0              ADDS     r0,r4,#6
000042  f7fffffe          BL       eMBRegHoldingCB
000046  4680              MOV      r8,r0
;;;136                    eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
;;;137                                     usRegAddress, usRegCount, MB_REG_WRITE );
;;;138    
;;;139                /* If an error occured convert it into a Modbus exception. */
;;;140                if( eRegStatus != MB_ENOERR )
000048  f1b80f00          CMP      r8,#0
00004c  d004              BEQ      |L4.88|
;;;141                {
;;;142                    eStatus = prveMBError2Exception( eRegStatus );
00004e  4640              MOV      r0,r8
000050  f7fffffe          BL       prveMBError2Exception
000054  4682              MOV      r10,r0
000056  e007              B        |L4.104|
                  |L4.88|
;;;143                }
;;;144                else
;;;145                {
;;;146                    /* The response contains the function code, the starting
;;;147                     * address and the quantity of registers. We reuse the
;;;148                     * old values in the buffer because they are still valid.
;;;149                     */
;;;150                    *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
000058  2005              MOVS     r0,#5
00005a  8030              STRH     r0,[r6,#0]
00005c  e004              B        |L4.104|
                  |L4.94|
;;;151                }
;;;152            }
;;;153            else
;;;154            {
;;;155                eStatus = MB_EX_ILLEGAL_DATA_VALUE;
00005e  f04f0a03          MOV      r10,#3
000062  e001              B        |L4.104|
                  |L4.100|
;;;156            }
;;;157        }
;;;158        else
;;;159        {
;;;160            /* Can't be a valid request because the length is incorrect. */
;;;161            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
000064  f04f0a03          MOV      r10,#3
                  |L4.104|
;;;162        }
;;;163        return eStatus;
000068  4650              MOV      r0,r10
;;;164    }
00006a  e8bd87f0          POP      {r4-r10,pc}
;;;165    #endif
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\FreeModbus-V1.5\\functions\\mbfuncholding.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_mbfuncholding_c_ea59194a____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___15_mbfuncholding_c_ea59194a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_mbfuncholding_c_ea59194a____REVSH|
#line 128
|__asm___15_mbfuncholding_c_ea59194a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
